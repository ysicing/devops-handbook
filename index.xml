<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>运维指南</title><link>https://ysicing.me/</link><description>Recent content on 运维指南</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>root@ysicing.net (ysicing)</managingEditor><webMaster>root@ysicing.net (ysicing)</webMaster><copyright>©{year}, All Rights Reserved</copyright><lastBuildDate>Mon, 18 May 2020 22:53:01 +0800</lastBuildDate><atom:link href="https://ysicing.me/index.xml" rel="self" type="application/rss+xml"/><item><title>使用ergo快速安装k8s1.18.3</title><link>https://ysicing.me/posts/k8s-install-ergo/</link><pubDate>Fri, 22 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 22 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-install-ergo/</guid><description>基于sealos, 一键高可用，简单上手, 安装k8s 1.18.3版本 准备虚拟机 环境: 3台机器(debian/buster 10.4, 11.11.11.111~11.11.11.113, 2核4G80G存储</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/k8s/k8s02.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>kubernetes</category></item><item><title>如何在线重装Debian</title><link>https://ysicing.me/posts/debian-reinstall/</link><pubDate>Fri, 22 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 22 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/debian-reinstall/</guid><description>1. 背景 云服务商提供的机器可能安装了一些服务组件，如监控等等，想要一个干净的环境。 一条命令快速重装干净的Linux环境 目前仅支持Debian(</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/debian/Debian_logo.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>debian</category><category>debian</category></item><item><title>ACK 添加内网负载均衡</title><link>https://ysicing.me/posts/aliyun-ack-ingress/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/aliyun-ack-ingress/</guid><description>先已经创建好内网slb,获取slb的ID为lb-xxxx # intranet-slb-ingress.yml apiVersion: v1 kind: Service metadata: # 这里服务取名为nginx-ingress-lb-intranet name: nginx-ingress-lb-intranet</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/graph.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>ingress</category><category>kubernetes</category><category>ack</category><category>kubernetes</category></item><item><title>AdGuard使用姿势</title><link>https://ysicing.me/posts/dns-adguard-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/dns-adguard-install/</guid><description>AdGuard Home使用Golang开发，因此安装非常简单，这里以容器的方式部署为例，其它方式可参考官方帮助文档。 主要功能 拦截AD 号称隐私保护 家庭保护</description><dc:creator>ysicing</dc:creator><category>dns</category><category>tools</category></item><item><title>awk 中关于多个$的用法</title><link>https://ysicing.me/posts/awk-func/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/awk-func/</guid><description>上周有遇到过这个问题 awk '{print $$1}' 这个$$是什么用法呢 间接字段寻址,其类似 awk '{print $$1}' ===&amp;gt; awk '{print $($1)}' ===&amp;gt; awk '{Nr=$1; print $Nr}' 示例: $ echo -e &amp;quot;1 b c d\n2 b c d\n3 b c d\n4 b c d&amp;quot; 1 b c d 2 b</description><dc:creator>ysicing</dc:creator><category>shell</category><category>shell</category></item><item><title>docker快速安装</title><link>https://ysicing.me/posts/docker-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/docker-install/</guid><description>安装 curl -fsSL https://ysicing.me/hack/docker/install.sh | bash 或者 ergo install docker -h 做了如下设置 1 2 3 4 5 6 7 8 9 10 11 12 13 { &amp;#34;exec-opts&amp;#34;: [&amp;#34;native.cgroupdriver=systemd&amp;#34;], &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://reg-mirror.qiniu.com&amp;#34;,&amp;#34;https://dyucrs4l.mirror.aliyuncs.com&amp;#34;,&amp;#34;https://dockerhub.azk8s.cn&amp;#34;], &amp;#34;bip&amp;#34;: &amp;#34;169.254.0.1/24&amp;#34;, &amp;#34;max-concurrent-downloads&amp;#34;: 10, &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;, &amp;#34;log-level&amp;#34;: &amp;#34;warn&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;max-size&amp;#34;: &amp;#34;20m&amp;#34;, &amp;#34;max-file&amp;#34;: &amp;#34;2&amp;#34; }, &amp;#34;storage-driver&amp;#34;: &amp;#34;overlay2&amp;#34; } docker常用工具安装 docker run --rm</description><dc:creator>ysicing</dc:creator><category>docker</category><category>安装</category><category>docker</category></item><item><title>Ergo Tools</title><link>https://ysicing.me/posts/ergo-tools/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/ergo-tools/</guid><description/><dc:creator>ysicing</dc:creator></item><item><title>Go基础</title><link>https://ysicing.me/posts/go-study-ch1/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/go-study-ch1/</guid><description>变量和常量 关键字&amp;amp;保留字 # 25个保留字 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var # 37个保留字 Constants: true false iota nil Types: int int8 int16 int32 int64 uint uint8 uint16 uint32</description><dc:creator>ysicing</dc:creator><category>go</category><category>go</category></item><item><title>helm安装</title><link>https://ysicing.me/posts/helm-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm-install/</guid><description>helm 安装 安装docker时默认已经安装了helm,如果不是最新版本请upgrade-tools 1 2 3 4 5 docker pull ysicing/tools docker run --rm -v /usr/local/bin:/sysdir ysicing/tools tar zxf /pkg.tgz -C /sysdir # 版本 helm version</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>helm</category><category>kubernetes</category><category>helm</category></item><item><title>helm部署docker registry</title><link>https://ysicing.me/posts/helm-docker-registry/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm-docker-registry/</guid><description>部署docker registry 最近大陆push镜像老是超时，于是想自建一个，使用helm方式, 和drone安装方式类似 部署 helm pull stable/docker-registry tar xf docker-registry-1.9.1.tgz &amp;amp;&amp;amp; cd docker-registry/ # 编辑val</description><dc:creator>ysicing</dc:creator><category>helm</category></item><item><title>helm部署drone</title><link>https://ysicing.me/posts/helm-drone/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm-drone/</guid><description>使用Helm安装Drone 一个比较热门的轻量级CI/CD开源工具：Drone 简介 Drone是用Go开发的开源轻量级CI/CD工具 使用简单的 YAML</description><dc:creator>ysicing</dc:creator><category>drone</category><category>helm</category></item><item><title>ingress安装</title><link>https://ysicing.me/posts/ingress-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/ingress-install/</guid><description>域名相关 默认情况下, 本地环境域名测试 *.k7s.xyz 192.168.100.101 *.slb.k7s.xyz 192.168.100.102 *.vlb.k7s.xyz192.168.100.103 NGINX Ingress Controller (ingress-nginx) 使用helm方式安装 kubectl apply -f https://ysicing.me/hack/helm/nginx-ingress/ns.yaml # 安装 helm install nginx-ingress -f https://ysicing.me/hack/helm/nginx-ingress/nginx-ingress-1.34.2.yaml stable/nginx-ingress -n ingress-nginx # 升级 helm upgrade nginx-ingress -f https://ysicing.me/hack/helm/nginx-ingress/nginx-ingress-1.34.2.yaml stable/nginx-ingress -n ingress-nginx NGINX Ingress Controllers (kubernetes-ingress) helm repo add</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>ingress</category><category>kubernetes</category><category>ingress</category></item><item><title>k3s 安装小记</title><link>https://ysicing.me/posts/k3s-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k3s-install/</guid><description>k3s 是Rancher推出的轻量级 k8s. 下载安装脚本 # 境外 curl -sfL https://get.k3s.io &amp;gt; install.sh # 大陆 curl -sfL https://docs.rancher.cn/k3s/k3s-install.sh &amp;gt; k3s-install.sh 安装master节点 INSTALL_K3S_EXEC=&amp;quot;--no-deploy traefik --node-ip 10.147.20.41 --docker&amp;quot; ./install.sh # 配置kubeconfig cp -a /etc/rancher/k3s/k3s.yaml</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>k3s</category><category>kubernetes</category></item><item><title>k8s实践之calico mtu</title><link>https://ysicing.me/posts/k8s-calico-mtu/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-calico-mtu/</guid><description>Ucloud 网络 ucloud默认mtu是 1454 所以calico需要改mtu kubectl patch configmap/calico-config -n kube-system --type merge -p '{&amp;quot;data&amp;quot;:{&amp;quot;veth_mtu&amp;quot;: &amp;quot;1404&amp;quot;}}' 参考 Configure MTU to maximize network performance</description><dc:creator>ysicing</dc:creator><category>calico</category><category>kubernetes</category></item><item><title>k8s实践之基础概念</title><link>https://ysicing.me/posts/k8s-intro-base/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-intro-base/</guid><description>概念篇 Kubernetes 基本概念和使用方法 架构 etcd保存了整个集群的状态； apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s实践之安装linkerdv2</title><link>https://ysicing.me/posts/k8s-linkerd-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-linkerd-install/</guid><description>安装linkerd v2 安装二进制 docker run --rm -v /usr/local/bin:/sysdir ysicing/tools tar zxf /pkg.tgz -C /sysdir 获取相关镜像 1 2 3 linkerd install --ignore-cluster | grep image: | sed -e &amp;#39;s/^ *//&amp;#39; | sort | uniq | awk &amp;#39;{print $2}&amp;#39; | xargs -I {} docker pull {} linkerd install --ignore-cluster | grep image: | sed -e</description><dc:creator>ysicing</dc:creator><category>linkerd</category><category>kubernetes</category></item><item><title>k8s实践之资源管理的权限控制</title><link>https://ysicing.me/posts/k8s-sa/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-sa/</guid><description>k8s 资源管理的权限控制 在k8s中，由系统自身的接口来创建和管理的账号类型只有一种，叫做ServiceAccount。 可以使用下面的命令来查看目</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s实践之部署第一个应用</title><link>https://ysicing.me/posts/k8s-intro-deploy/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-intro-deploy/</guid><description>部署第一个应用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # https://ysicing.me/hack/demo/deploy.</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s常用扩展组件</title><link>https://ysicing.me/posts/k8s-addons/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-addons/</guid><description>扩展了Kubernetes的功能 部署kuboard kubectl apply -f https://ysicing.me/hack/k7s/install/kuboard/deploy.yml # 因为ingress部署关系，所以配置解析域名为ui.slb.k7s.xyz # 管理</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s标签和选择器</title><link>https://ysicing.me/posts/k8s-labels/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-labels/</guid><description>格式要求： 有效标签值必须为 63 个字符或更少，并且必须为空或以字母数字字符（[a-z0-9A-Z]）开头和结尾，中间可以包含破折号（-）、下划线</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s配置默认存储</title><link>https://ysicing.me/posts/k8s-default-sc/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-default-sc/</guid><description>配置默认存储 # 集群已有存储类型（StorageClass），执行 kubectl get sc看下当前是否设置了默认的 storageclass kubectl get sc kubectl patch storageclass nfs-data -p '{&amp;quot;metadata&amp;quot;: {&amp;quot;annotations&amp;quot;:{&amp;quot;storageclass.kubernetes.io/is-default-class&amp;quot;:&amp;quot;true&amp;quot;}}}'</description><dc:creator>ysicing</dc:creator><category>存储</category><category>kubernetes</category></item><item><title>kubectl plugin插件机制初体验之krew</title><link>https://ysicing.me/posts/k8s-kubectl-plugins/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-kubectl-plugins/</guid><description>kubectl plugin插件机制初体验之krew 插件机制 这个早就已经GA了，其作用允许开发者以独立的二进制或脚本形式发布自定义的kubectl子命令,</description><dc:creator>ysicing</dc:creator><category>krew</category><category>kubernetes</category></item><item><title>minikube安装k8s</title><link>https://ysicing.me/posts/k8s-minikube-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-minikube-install/</guid><description>minikube安装k8s MacOS安装 1 brew install minikube 1 2 # PROXY可以根据自己需要设置，可不设置 minikube start --cpus=2 --memory 4g --disk-size=40g --driver=virtualbox --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --nodes=2 --docker-env HTTP_PROXY=http://192.168.99.1:7890 --docker-env HTTPS_PROXY=http://192.168.99.1:7890 --docker-env NO_PROXY=127.0.0.1/32,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,localhost</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>NFS存储</title><link>https://ysicing.me/posts/nfs-install-k8s/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/nfs-install-k8s/</guid><description>NFS存储 Debian # 安装 apt update apt install -y nfs-kernel-server # 配置 mkdir /k8sdata echo &amp;quot;/k8sdata/ *(insecure,rw,sync,no_root_squash,no_subtree_check)&amp;quot; &amp;gt; /etc/exports # 启动nfs systemctl enable rpcbind systemctl enable nfs-server systemctl start rpcbind systemctl start nfs-server exportfs -r # 测试 showmount -e 127.0.0.1 CentOS # 安装nfs yum install -y nfs-utils # 配置共享目录 mkdir</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>nginx ingress 配置域名证书</title><link>https://ysicing.me/posts/k8s-ingress-tls-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-ingress-tls-config/</guid><description>nginx ingress 配置域名证书(默认以ingress-nginx为例) 创建证书 默认已经签发证书 创建 secret 创建好证书以后，需要将证书内容放到 secret 中，secret 中</description><dc:creator>ysicing</dc:creator><category>ingress</category><category>kubernetes</category><category>kubernetes</category></item><item><title>OpenLDAP安装初体验</title><link>https://ysicing.me/posts/openldap-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/openldap-install/</guid><description>OpenLDAP安装初体验 简介这里不在描述，google即可 docke快速部署 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description><dc:creator>ysicing</dc:creator><category>ldap</category></item><item><title>Systemd 定时器教程</title><link>https://ysicing.me/posts/systemd-timers/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/systemd-timers/</guid><description>定时任务，如每65分钟执行一次 crontab 定时任务 65 分钟执行一次，怎么写？ 这个时候，用系统自带的crontab就不好实现了,这时候就是systemd该</description><dc:creator>ysicing</dc:creator><category>冷知识</category></item><item><title>vim配置</title><link>https://ysicing.me/posts/vim-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/vim-config/</guid><description>安装vim plug curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 写配置 向~/.vimrc写入 &amp;quot; autocmd BufWritePost $MYVIMRC source $MYVIMRC &amp;quot; 关闭兼容模式 set nocompatible &amp;quot; 设置行号 set nu &amp;quot;突出显示当前行,列 set cursorline set cursorcolumn &amp;quo</description><dc:creator>ysicing</dc:creator><category>vim</category></item><item><title>vscode配置</title><link>https://ysicing.me/posts/vscode-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/vscode-config/</guid><description>vscode配置 安装好Go相关插件，配置工具包 使用command+shift+P快捷键,然后键入Go: Install/Update Tools选中全部(根据需要),稍等</description><dc:creator>ysicing</dc:creator><category>vscode</category><category>go</category></item><item><title>使用nvm进行node版本管理</title><link>https://ysicing.me/posts/nodejs-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/nodejs-install/</guid><description>使用nvm进行node版本管理 安装nvm 1 2 3 4 5 6 7 8 9 10 11 12 13 # 安装 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash # 默认会写.zshrc ### .zshrc nvm start export NVM_DIR=&amp;#34;$HOME/.nvm&amp;#34; [ -s &amp;#34;$NVM_DIR/nvm.sh&amp;#34; ] &amp;amp;&amp;amp; \. &amp;#34;$NVM_DIR/nvm.sh&amp;#34; # This loads nvm [</description><dc:creator>ysicing</dc:creator><category>nodejs</category></item><item><title>内网穿透之wireguard</title><link>https://ysicing.me/posts/wireguard-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/wireguard-install/</guid><description>内网穿透之wireguard 安装 Debian # Debian Bullseye 之前版本都需要启用backports源来支持安装 apt install wireguard -y macOS brew install wireguard-tools 配置服务端 cd /etc/wireguard # 创建服务端密钥对 umask 077</description><dc:creator>ysicing</dc:creator><category>wireguard</category><category>内网穿透</category><category>内网穿透</category></item><item><title>安装golang</title><link>https://ysicing.me/posts/go-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/go-install/</guid><description>主要是用于linux安装 安装,配置 1 2 3 4 5 6 7 8 9 10 11 12 13 # 下载 wget https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz # 解压 tar -C /usr/local -xzf go1.13.3.linux-amd64.tar.gz # 配置 .bashrc export GO111MODULE=on export GOPROXY=https://goproxy.cn export GOPATH=&amp;#34;/root/go&amp;#34; export GOBIN=&amp;#34;$GOPATH/bin&amp;#34; export PATH=$PATH:$GOBIN:/usr/local/go/bin source .bashrc # 验证 go env 一键脚本 1 curl</description><dc:creator>ysicing</dc:creator><category>go</category><category>安装</category><category>go</category></item><item><title>开启集群feature开启集群feature</title><link>https://ysicing.me/posts/k8s-feature/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-feature/</guid><description>ttlSecondsAfterFinished 自动清理完成和失败的Job，目前该特性默认不启用。如何判断未启用,查看job资源，在spec里未发现ttlSecondsAfterFini</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>知识点</title><link>https://ysicing.me/posts/faq/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/faq/</guid><description>docker npm安装问题 npm config set unsafe-perm true git操作 # 改崩了 git fetch --all git reset --hard origin/master # 放弃本地全部/单个 git checkout . git checkout -- filename</description><dc:creator>ysicing</dc:creator><category>冷知识</category></item><item><title>通过Operator创建Prometheus</title><link>https://ysicing.me/posts/prometheus-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/prometheus-install/</guid><description>通过Operator创建Prometheus 为什么需要prometheus-operator 因为是prometheus主动去拉取的,所以在k</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>prometheus</category><category>kubernetes</category><category>prometheus</category></item><item><title>龙芯Mips64el平台上部署K8s</title><link>https://ysicing.me/posts/mips64el-loongson-k8s/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/mips64el-loongson-k8s/</guid><description>不会具体讲怎么部署，原理都类似,将原先amd64换成mips64el 中标麒麟龙芯CPU源 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # /etc/yum.repos.d/ns7-mips.repo [ns7-mips64el-os] name=NeoKylin Linux</description><dc:creator>ysicing</dc:creator></item><item><title>macOS常用工具</title><link>https://ysicing.me/links/macos-apps/</link><pubDate>Tue, 31 Dec 2019 00:04:50 +0900</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Tue, 31 Dec 2019 00:04:50 +0900</atom:modified><guid>https://ysicing.me/links/macos-apps/</guid><description>macOS 常用工具 个人常用工具列表 iTerm2(终端) Sourcetree(git工具) Dash(文档工具) iHosts(hosts编辑器) Microsoft To Do(Todo) p</description><dc:creator>ysicing</dc:creator></item><item><title>有趣的Github项目</title><link>https://ysicing.me/links/links/</link><pubDate>Tue, 31 Dec 2019 00:04:50 +0900</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Tue, 31 Dec 2019 00:04:50 +0900</atom:modified><guid>https://ysicing.me/links/links/</guid><description>用于记录发现的有用/有趣的Github项目 20191219 book prometheus 20191208 kubewatch Watch k8s events and trigger Handlers Go 20191121 overlay networking tool slackhq/nebula 20191104 KubeOperator 一键部署和管理生产级别的 Kubernetes 集群 20191010 Status Page statusfy NodeJS 20191009 Status Page statping Go 20191006 iptv 20190927 Collection of</description><dc:creator>ysicing</dc:creator></item><item><title>阿里云轻量应用服务器升级内核</title><link>https://ysicing.me/posts/aliyun-debian-upgrade-kernel/</link><pubDate>Sat, 18 May 2019 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sat, 18 May 2019 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/aliyun-debian-upgrade-kernel/</guid><description>阿里云轻量应用服务器升级内核 升级有风险请慎重哦 配置说明 阿里云HK 1核1G1TB30Mbps ¥24/m Debian 9.9 更新源 需要移除默认源，使用如下源 # 需</description><dc:creator>ysicing</dc:creator><category>debian</category></item><item><title>Debian个人常用操作指南</title><link>https://ysicing.me/posts/debian-op/</link><pubDate>Thu, 18 May 2017 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Thu, 18 May 2017 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/debian-op/</guid><description>创建Debian虚拟机 1 2 3 4 5 6 7 8 9 10 Usage: ergo vm create [flags] Flags: -h, --help help for create --path string Vagrantfile所在目录, $HOME/vm --vmcpus string 虚拟机CPU数 (default &amp;#34;2&amp;#34;) --vmmem string 虚拟机Mem</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/debian/Debian_logo.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>debian</category><category>debian</category></item><item><title>README</title><link>https://ysicing.me/posts/blog-notice/</link><pubDate>Sun, 28 Jul 2013 13:21:00 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sun, 28 Jul 2013 13:21:00 +0800</atom:modified><guid>https://ysicing.me/posts/blog-notice/</guid><description>开始之前 在阅读本书之前希望您掌握以下知识和准备以下环境： Debian 常用命令 Docker 基本操作 Mac/Linux 皆可 系列主题 Kubernetes(1.18.3)实践 Go(1.</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/code-file.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>站点</category><category>站点</category></item></channel></rss>