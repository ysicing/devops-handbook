"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7310],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return b}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(t),b=a,m=f["".concat(s,".").concat(b)]||f[b]||u[b]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},77297:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(83117),a=t(80102),o=(t(67294),t(3905)),i=["components"],l={title:"ACK \u6dfb\u52a0\u5185\u7f51\u8d1f\u8f7d\u5747\u8861",date:new Date("2020-05-18T14:55:18.000Z"),description:"ACK \u6dfb\u52a0\u5185\u7f51\u8d1f\u8f7d\u5747\u8861",tags:["ingress","kubernetes","ack"]},s=void 0,c={permalink:"/posts/aliyun-ack-ingress",source:"@site/blog/posts/aliyun-ack-ingress.md",title:"ACK \u6dfb\u52a0\u5185\u7f51\u8d1f\u8f7d\u5747\u8861",description:"ACK \u6dfb\u52a0\u5185\u7f51\u8d1f\u8f7d\u5747\u8861",date:"2020-05-18T14:55:18.000Z",formattedDate:"2020\u5e745\u670818\u65e5",tags:[{label:"ingress",permalink:"/tags/ingress"},{label:"kubernetes",permalink:"/tags/kubernetes"},{label:"ack",permalink:"/tags/ack"}],readingTime:.5666666666666667,hasTruncateMarker:!0,authors:[],frontMatter:{title:"ACK \u6dfb\u52a0\u5185\u7f51\u8d1f\u8f7d\u5747\u8861",date:"2020-05-18T14:55:18.000Z",description:"ACK \u6dfb\u52a0\u5185\u7f51\u8d1f\u8f7d\u5747\u8861",tags:["ingress","kubernetes","ack"]},prevItem:{title:"docker\u5feb\u901f\u5b89\u88c5",permalink:"/posts/docker"},nextItem:{title:"\u77e5\u8bc6\u70b9",permalink:"/posts/faq"}},p={authorsImageUrls:[]},u=[],f={toc:u};function b(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u5148\u5df2\u7ecf\u521b\u5efa\u597d\u5185\u7f51slb,\u83b7\u53d6slb\u7684ID\u4e3a",(0,o.kt)("inlineCode",{parentName:"p"},"lb-xxxx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# intranet-slb-ingress.yml\napiVersion: v1\nkind: Service\nmetadata:\n  # \u8fd9\u91cc\u670d\u52a1\u53d6\u540d\u4e3anginx-ingress-lb-intranet\n  name: nginx-ingress-lb-intranet\n  namespace: kube-system\n  labels:\n    app: nginx-ingress-lb-intranet\n  annotations:\n    # \u6307\u660eSLB\u5b9e\u4f8b\u5730\u5740\u7c7b\u578b\u4e3a\u79c1\u7f51\u7c7b\u578b\n    service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet\n    # \u4fee\u6539\u4e3a\u60a8\u7684\u79c1\u7f51SLB\u5b9e\u4f8bID\n    service.beta.kubernetes.io/alicloud-loadbalancer-id: lb-xxxx\n    # \u662f\u5426\u81ea\u52a8\u521b\u5efaSLB\u7aef\u53e3\u76d1\u542c\uff08\u4f1a\u8986\u5199\u5df2\u6709\u7aef\u53e3\u76d1\u542c\uff09\uff0c\u4e5f\u53ef\u624b\u52a8\u521b\u5efa\u7aef\u53e3\u76d1\u542c\n    service.beta.kubernetes.io/alicloud-loadbalancer-force-override-listeners: 'true'\nspec:\n  type: LoadBalancer\n  # route traffic to other nodes\n  externalTrafficPolicy: \"Cluster\"\n  ports:\n  - port: 80\n    name: http\n    targetPort: 80\n  - port: 443\n    name: https\n    targetPort: 443\n  selector:\n    # select app=ingress-nginx pods\n    app: ingress-nginx\n")),(0,o.kt)("p",null,"\u751f\u6548\u5185\u7f51slb"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl apply -f intranet-slb-ingress.yml\n")),(0,o.kt)("p",null,"\u67e5\u770bslb"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nginx-ingress-lb                                  LoadBalancer   172.x.x.x    39.x.x.x   80:31110/TCP,443:31574/TCP   20h\nnginx-ingress-lb-intranet                         LoadBalancer   172.x.x.x    10.x.x.x   80:30740/TCP,443:30852/TCP   73m\n")))}b.isMDXComponent=!0}}]);