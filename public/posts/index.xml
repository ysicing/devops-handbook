<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on 运维指南</title><link>https://ysicing.me/posts/</link><description>Recent content in Posts on 运维指南</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>ops.ysicing@gamil.com (ysicing)</managingEditor><webMaster>ops.ysicing@gamil.com (ysicing)</webMaster><copyright>©{year}, All Rights Reserved</copyright><lastBuildDate>Mon, 18 May 2020 22:55:18 +0800</lastBuildDate><atom:link href="https://ysicing.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>AdGuard使用姿势</title><link>https://ysicing.me/posts/dns-adguard-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/dns-adguard-install/</guid><description>AdGuard Home使用Golang开发，因此安装非常简单，这里以容器的方式部署为例，其它方式可参考官方帮助文档。 主要功能 拦截AD 号称隐私保护 家庭保护</description><dc:creator>ysicing</dc:creator><category>dns</category><category>AdGuard</category><category>dns</category></item><item><title>awk 中关于多个$的用法</title><link>https://ysicing.me/posts/awk-func/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/awk-func/</guid><description>上周有遇到过这个问题 awk '{print $$1}' 这个$$是什么用法呢 间接字段寻址,其类似 awk '{print $$1}' ===&amp;gt; awk '{print $($1)}' ===&amp;gt; awk '{Nr=$1; print $Nr}' 示例: $ echo -e &amp;quot;1 b c d\n2 b c d\n3 b c d\n4 b c d&amp;quot; 1 b c d 2 b</description><dc:creator>ysicing</dc:creator><category>shell</category><category>shell</category></item><item><title>Debian 10操作指南</title><link>https://ysicing.me/posts/debian-buster-op/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/debian-buster-op/</guid><description>操作有风险 更新源 需要移除默认源，使用如下源 # 默认 cat &amp;gt;/etc/apt/sources.list &amp;lt;&amp;lt;EOF deb http://mirrors.ustc.edu.cn/debian/ buster main contrib non-free deb http://mirrors.ustc.edu.cn/debian/debian/ buster-updates main contrib non-free deb http://mirrors.ustc.edu.cn/debian/ buster-backports main contrib non-free deb http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free EOF # Ucloud cat &amp;gt;/etc/apt/sources.list &amp;lt;&amp;lt;EOF deb http://mirrors.ucloud.cn/debian/ buster main contrib non-free deb http://mirrors.ucloud.cn/debian/ buster-updates main contrib non-free deb</description><dc:creator>ysicing</dc:creator><category>debian</category></item><item><title>docker快速安装</title><link>https://ysicing.me/posts/docker-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/docker-install/</guid><description>安装 curl -fsSL https://ysicing.me/hack/docker/install.sh | bash 或者 ergo install docker -h 做了如下设置 1 2 3 4 5 6 7 8 9 10 11 12 13 { &amp;#34;exec-opts&amp;#34;: [&amp;#34;native.cgroupdriver=systemd&amp;#34;], &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://reg-mirror.qiniu.com&amp;#34;,&amp;#34;https://dyucrs4l.mirror.aliyuncs.com&amp;#34;,&amp;#34;https://dockerhub.azk8s.cn&amp;#34;], &amp;#34;bip&amp;#34;: &amp;#34;169.254.0.1/24&amp;#34;, &amp;#34;max-concurrent-downloads&amp;#34;: 10, &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;, &amp;#34;log-level&amp;#34;: &amp;#34;warn&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;max-size&amp;#34;: &amp;#34;20m&amp;#34;, &amp;#34;max-file&amp;#34;: &amp;#34;2&amp;#34; }, &amp;#34;storage-driver&amp;#34;: &amp;#34;overlay2&amp;#34; } docker常用工具安装 docker run --rm</description><dc:creator>ysicing</dc:creator><category>docker</category><category>安装</category><category>docker</category></item><item><title>Ergo Tools</title><link>https://ysicing.me/posts/ergo-tools/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/ergo-tools/</guid><description/><dc:creator>ysicing</dc:creator></item><item><title>Go基础</title><link>https://ysicing.me/posts/go-study-ch1/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/go-study-ch1/</guid><description>变量和常量 关键字&amp;amp;保留字 # 25个保留字 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var # 37个保留字 Constants: true false iota nil Types: int int8 int16 int32 int64 uint uint8 uint16 uint32</description><dc:creator>ysicing</dc:creator><category>go</category><category>go</category></item><item><title>helm安装</title><link>https://ysicing.me/posts/helm-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm-install/</guid><description>helm 安装 安装docker时默认已经安装了helm,如果不是最新版本请upgrade-tools 1 2 3 4 5 docker pull ysicing/tools docker run --rm -v /usr/local/bin:/sysdir ysicing/tools tar zxf /pkg.tgz -C /sysdir # 版本 helm version</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>helm</category><category>kubernetes</category><category>helm</category></item><item><title>helm部署docker registry</title><link>https://ysicing.me/posts/helm-docker-registry/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm-docker-registry/</guid><description>部署docker registry 最近大陆push镜像老是超时，于是想自建一个，使用helm方式, 和drone安装方式类似 部署 helm pull stable/docker-registry tar xf docker-registry-1.9.1.tgz &amp;amp;&amp;amp; cd docker-registry/ # 编辑val</description><dc:creator>ysicing</dc:creator><category>helm</category></item><item><title>helm部署drone</title><link>https://ysicing.me/posts/helm-drone/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm-drone/</guid><description>使用Helm安装Drone 一个比较热门的轻量级CI/CD开源工具：Drone 简介 Drone是用Go开发的开源轻量级CI/CD工具 使用简单的 YAML</description><dc:creator>ysicing</dc:creator><category>drone</category><category>helm</category></item><item><title>ingress安装</title><link>https://ysicing.me/posts/ingress-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/ingress-install/</guid><description>域名相关 默认情况下, 本地环境域名测试 *.k7s.xyz 192.168.100.101 *.slb.k7s.xyz 192.168.100.102 *.vlb.k7s.xyz192.168.100.103 NGINX Ingress Controller (ingress-nginx) 使用helm方式安装 kubectl apply -f https://ysicing.me/hack/helm/nginx-ingress/ns.yaml # 安装 helm install nginx-ingress -f https://ysicing.me/hack/helm/nginx-ingress/nginx-ingress-1.34.2.yaml stable/nginx-ingress -n ingress-nginx # 升级 helm upgrade nginx-ingress -f https://ysicing.me/hack/helm/nginx-ingress/nginx-ingress-1.34.2.yaml stable/nginx-ingress -n ingress-nginx NGINX Ingress Controllers (kubernetes-ingress) helm repo add</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>ingress</category><category>kubernetes</category><category>ingress</category></item><item><title>k3s 安装小记</title><link>https://ysicing.me/posts/k3s-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k3s-install/</guid><description>k3s 是Rancher推出的轻量级 k8s. 下载安装脚本 # 境外 curl -sfL https://get.k3s.io &amp;gt; install.sh # 大陆 curl -sfL https://docs.rancher.cn/k3s/k3s-install.sh &amp;gt; k3s-install.sh 安装master节点 INSTALL_K3S_EXEC=&amp;quot;--no-deploy traefik --node-ip 10.147.20.41 --docker&amp;quot; ./install.sh # 配置kubeconfig cp -a /etc/rancher/k3s/k3s.yaml</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>k3s</category><category>kubernetes</category></item><item><title>minikube安装k8s</title><link>https://ysicing.me/posts/k8s-minikube-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-minikube-install/</guid><description>minikube安装k8s MacOS安装 1 brew install minikube 1 2 # PROXY可以根据自己需要设置，可不设置 minikube start --cpus=2 --memory 4g --disk-size=40g --driver=virtualbox --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --nodes=2 --docker-env HTTP_PROXY=http://192.168.99.1:7890 --docker-env HTTPS_PROXY=http://192.168.99.1:7890 --docker-env NO_PROXY=127.0.0.1/32,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,localhost</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>NFS存储</title><link>https://ysicing.me/posts/nfs-install-k8s/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/nfs-install-k8s/</guid><description>NFS存储 Debian # 安装 apt update apt install -y nfs-kernel-server # 配置 mkdir /k8sdata echo &amp;quot;/k8sdata/ *(insecure,rw,sync,no_root_squash,no_subtree_check)&amp;quot; &amp;gt; /etc/exports # 启动nfs systemctl enable rpcbind systemctl enable nfs-server systemctl start rpcbind systemctl start nfs-server exportfs -r # 测试 showmount -e 127.0.0.1 CentOS # 安装nfs yum install -y nfs-utils # 配置共享目录 mkdir</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>OpenLDAP安装初体验</title><link>https://ysicing.me/posts/openldap-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/openldap-install/</guid><description>OpenLDAP安装初体验 简介这里不在描述，google即可 docke快速部署 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description><dc:creator>ysicing</dc:creator><category>ldap</category></item><item><title>sealos安装k8s</title><link>https://ysicing.me/posts/sealos-install-k8s/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/sealos-install-k8s/</guid><description>推荐使用sealos, 一键高可用，简单上手, 安装k8s 1.18.2版本 准备工作 虚拟机 环境: 3台机器(debian/buster, 11.11.11.111~11.11.11.113, 2核4G8</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>Systemd 定时器教程</title><link>https://ysicing.me/posts/systemd-timers/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/systemd-timers/</guid><description>定时任务，如每65分钟执行一次 crontab 定时任务 65 分钟执行一次，怎么写？ 这个时候，用系统自带的crontab就不好实现了,这时候就是systemd该</description><dc:creator>ysicing</dc:creator><category>冷知识</category></item><item><title>vim配置</title><link>https://ysicing.me/posts/vim-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/vim-config/</guid><description>安装vim plug curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 写配置 向~/.vimrc写入 &amp;quot; autocmd BufWritePost $MYVIMRC source $MYVIMRC &amp;quot; 关闭兼容模式 set nocompatible &amp;quot; 设置行号 set nu &amp;quot;突出显示当前行,列 set cursorline set cursorcolumn &amp;quo</description><dc:creator>ysicing</dc:creator><category>vim</category></item><item><title>vscode配置</title><link>https://ysicing.me/posts/vscode-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/vscode-config/</guid><description>vscode配置 安装好Go相关插件，配置工具包 使用command+shift+P快捷键,然后键入Go: Install/Update Tools选中全部(根据需要),稍等</description><dc:creator>ysicing</dc:creator><category>vscode</category><category>go</category></item><item><title>使用nvm进行node版本管理</title><link>https://ysicing.me/posts/nodejs-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/nodejs-install/</guid><description>使用nvm进行node版本管理 安装nvm 1 2 3 4 5 6 7 8 9 10 11 12 13 # 安装 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash # 默认会写.zshrc ### .zshrc nvm start export NVM_DIR=&amp;#34;$HOME/.nvm&amp;#34; [ -s &amp;#34;$NVM_DIR/nvm.sh&amp;#34; ] &amp;amp;&amp;amp; \. &amp;#34;$NVM_DIR/nvm.sh&amp;#34; # This loads nvm [</description><dc:creator>ysicing</dc:creator><category>nodejs</category></item><item><title>内网穿透之wireguard</title><link>https://ysicing.me/posts/wireguard-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/wireguard-install/</guid><description>内网穿透之wireguard 安装 Debian # Debian Bullseye 之前版本都需要启用backports源来支持安装 apt install wireguard -y macOS brew install wireguard-tools 配置服务端 cd /etc/wireguard # 创建服务端密钥对 umask 077</description><dc:creator>ysicing</dc:creator><category>wireguard</category><category>内网穿透</category><category>内网穿透</category></item><item><title>初始化Debian</title><link>https://ysicing.me/posts/debian-init/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/debian-init/</guid><description>初始化Debian 基础环境配置和安装docker配置 all.yaml: 系统+docker docker.yaml: 安装docker init.yaml: 系统 命令行工具 仅使用debian系统 ergo init debian -h 宿主</description><dc:creator>ysicing</dc:creator><category>debian</category><category>安装</category><category>debian</category></item><item><title>在线重装Debian</title><link>https://ysicing.me/posts/debian-reinstall/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/debian-reinstall/</guid><description>背景 一条命令快速重装干净的Linux环境 目前仅支持Debian(不会不打算支持其他系统) 基于萌咖大佬的二次魔改 默认做了 默认root密码 vag</description><dc:creator>ysicing</dc:creator><category>debian</category><category>安装</category><category>debian</category></item><item><title>安装golang</title><link>https://ysicing.me/posts/go-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/go-install/</guid><description>主要是用于linux安装 安装,配置 1 2 3 4 5 6 7 8 9 10 11 12 13 # 下载 wget https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz # 解压 tar -C /usr/local -xzf go1.13.3.linux-amd64.tar.gz # 配置 .bashrc export GO111MODULE=on export GOPROXY=https://goproxy.cn export GOPATH=&amp;#34;/root/go&amp;#34; export GOBIN=&amp;#34;$GOPATH/bin&amp;#34; export PATH=$PATH:$GOBIN:/usr/local/go/bin source .bashrc # 验证 go env 一键脚本 1 curl</description><dc:creator>ysicing</dc:creator><category>go</category><category>安装</category><category>go</category></item><item><title>开启集群feature开启集群feature</title><link>https://ysicing.me/posts/k8s-feature/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-feature/</guid><description>ttlSecondsAfterFinished 自动清理完成和失败的Job，目前该特性默认不启用。如何判断未启用,查看job资源，在spec里未发现ttlSecondsAfterFini</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>知识点</title><link>https://ysicing.me/posts/faq/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/faq/</guid><description>docker npm安装问题 npm config set unsafe-perm true git操作 # 改崩了 git fetch --all git reset --hard origin/master # 放弃本地全部/单个 git checkout . git checkout -- filename</description><dc:creator>ysicing</dc:creator><category>冷知识</category></item><item><title>通过Operator创建Prometheus</title><link>https://ysicing.me/posts/prometheus-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/prometheus-install/</guid><description>通过Operator创建Prometheus 为什么需要prometheus-operator 因为是prometheus主动去拉取的,所以在k</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>prometheus</category><category>kubernetes</category><category>prometheus</category></item><item><title>阿里云轻量应用服务器升级内核</title><link>https://ysicing.me/posts/aliyun-debian-upgrade-kernel/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/aliyun-debian-upgrade-kernel/</guid><description>阿里云轻量应用服务器升级内核 升级有风险请慎重哦 配置说明 阿里云HK 1核1G1TB30Mbps ¥24/m Debian 9.9 更新源 需要移除默认源，使用如下源 # 需</description><dc:creator>ysicing</dc:creator><category>debian</category></item><item><title>龙芯Mips64el平台上部署K8s</title><link>https://ysicing.me/posts/mips64el-loongson-k8s/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>ops.ysicing@gamil.com (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/mips64el-loongson-k8s/</guid><description>不会具体讲怎么部署，原理都类似,将原先amd64换成mips64el 中标麒麟龙芯CPU源 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # /etc/yum.repos.d/ns7-mips.repo [ns7-mips64el-os] name=NeoKylin Linux</description><dc:creator>ysicing</dc:creator></item></channel></rss>