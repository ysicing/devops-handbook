{"./":{"url":"./","title":"序言","keywords":"","body":"DevOps运维指南/云原生实践手册 开始之前 在阅读本书之前希望您掌握以下知识和准备以下环境： Debian 常用命令 Docker 基本操作 Mac/Linux 皆可 系列主题 Kubernetes(1.17+)实践 Go(1.12+)开发实践 运维实践(主要是基于Debian发行版) ? 欢迎交流, 一起努力. 如果有任何疑问或错误，欢迎在 issues 进行提问或给予修正意见 如果喜欢或对你有所帮助，欢迎 Star，对我是一种鼓励和推进 &#x1F600; Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"kubernetes/install/":{"url":"kubernetes/install/","title":"安装篇","keywords":"","body":"安装 推荐使用sealos, 一键高可用，简单上手 准备工作 虚拟机 环境: 3台机器(debian/buster, 4.19.0-6-amd64, 172.20.0.101~172.20.0.103, 2核4G80G存储) mkdir k8s && cd k8s wget https://ysicing.me/hack/vm/Vagrantfile vagrant up 初始化环境 docker pull ysicing/ansible docker run -it --rm ysicing/ansible bash cp inventory.ini.example inventory.ini # 初始化系统,安装docker ansible-playbook all.yml exit 安装k8s 源码编译安装sealos,使用新特性 git clone https://github.com/fanux/sealos.git --depth 1 make local mv sealos /usr/local/bin/ 下载离线包定制离线包 wget https://sealyun.oss-cn-beijing.aliyuncs.com/413bd3624b2fb9e466601594b4f72072-1.17.0/kube1.17.0.tar.gz tar xf kube1.17.0.tar.gz 定制后的脚本，我移除了镜像和二进制文件,需要自己二次集成，下载路径install.tgz # 安装1master2worker sealos init --passwd vagrant --podcidr 192.168.0.0/16 --repo registry.cn-hangzhou.aliyuncs.com/google_containers --master 172.20.0.101 --node 172.20.0.102 --node 172.20.0.103 --version 1.17.0 --pkg-url /root/kube1.17.0.tar.gz # 清除 sealos clean --passwd vagrant --master 172.20.0.101 --node 172.20.0.102 --node 172.20.0.103 特别说明node节点需要指定路由，否则会安装失败,fanux/sealos#134 route add default gw 172.20.0.1 # 最后修改hosts 172.20.0.101 apiserver.cluster.local Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"kubernetes/plugins/":{"url":"kubernetes/plugins/","title":"插件篇","keywords":"","body":"kubectl plugin插件机制初体验之krew 插件机制 这个早就已经GA了，其作用允许开发者以独立的二进制或脚本形式发布自定义的kubectl子命令, 灵活快速操作k8s 插件不限制语言，只需将脚本或二进制可执行文件以kubectl-的前缀放到PATH中即可. 官方示例 官方Go示例辅助库 https://github.com/kubernetes/cli-runtime.git 不太简单的官方示例插件 https://github.com/kubernetes/sample-cli-plugin 示例插件 mkdir /usr/local/k8s export PATH=$PATH:/usr/local/k8s 示例插件如下： root@k8s1:~# cat /usr/local/k8s/kubectl-demo #!/bin/bash echo $1 赋予执行权限 chmod +x /usr/local/k8s/kubectl-demo 运行测试: root@k8s1:~# kubectl demo 666 666 root@k8s1:~# kubectl plugin list The following compatible plugins are available: /usr/local/k8s/kubectl-demo kubectl plugin list 可以查看PATH中查看有哪些插件 krew Package manager for kubectl plugins -- krew 安装krew # Bash and ZSH ( set -x; cd \"$(mktemp -d)\" && curl -fsSLO \"https://github.com/kubernetes-sigs/krew/releases/download/v0.3.3/krew.{tar.gz,yaml}\" && tar zxvf krew.tar.gz && KREW=./krew-\"$(uname | tr '[:upper:]' '[:lower:]')_amd64\" && \"$KREW\" install --manifest=krew.yaml --archive=krew.tar.gz && \"$KREW\" update ) # .bashrc/.zshrc export PATH=$PATH:/usr/local/k8s:${KREW_ROOT:-$HOME/.krew}/bin 查看当前可用的kubectl plugin，发现多了一个kubect-krew root@k8s1:~# kubectl plugin list The following compatible plugins are available: /usr/local/k8s/kubectl-demo /root/.krew/bin/kubectl-krew krew使用 kubectl krew krew is the kubectl plugin manager. You can invoke krew through kubectl: \"kubectl krew [command]...\" Usage: krew [command] Available Commands: help Help about any command info Show information about a kubectl plugin install Install kubectl plugins list List installed kubectl plugins search Discover kubectl plugins uninstall Uninstall plugins update Update the local copy of the plugin index upgrade Upgrade installed plugins to newer versions version Show krew version and diagnostics Flags: -h, --help help for krew -v, --v Level number for the log level verbosity Use \"krew [command] --help\" for more information about a command. 初体验 root@k8s1:~# kubectl get pods No resources found in default namespace. root@k8s1:~# kubectl krew install change-ns Installing plugin: change-ns Installed plugin: change-ns root@k8s1:~# kubectl krew list PLUGIN VERSION change-ns v1.0.0 krew v0.3.3 root@k8s1:~# kubectl change-ns nginx-ingress namespace changed to \"nginx-ingress\" root@k8s1:~# kubectl get pod root@k8s1:~# kubectl get pod NAME READY STATUS RESTARTS AGE nginx-ingress-rfswh 1/1 Running 0 2m6s nginx-ingress-v6c4l 1/1 Running 0 2m6s Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"kubernetes/dev/":{"url":"kubernetes/dev/","title":"开发篇","keywords":"","body":"参考资料 https://kubernetes.io/docs/concepts/architecture/controller/https://www.kubernetes.org.cn/2693.htmlhttps://github.com/kubernetes/client-gohttps://github.com/goodrain/rainbond/blob/master/gateway/store/store.go Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"kubernetes/install/helm_install.html":{"url":"kubernetes/install/helm_install.html","title":"Helm篇","keywords":"","body":"helm 安装 docker pull ysicing/tools docker run --rm -v /usr/local/bin:/sysdir ysicing/tools tar zxf /pkg.tgz -C /sysdir # 版本 helm version version.BuildInfo{Version:\"v3.0.2\", GitCommit:\"19e47ee3283ae98139d98460de796c1be1e3975f\", GitTreeState:\"clean\", GoVersion:\"go1.13.5\"} 配置国内helm镜像库 helm repo add stable http://mirror.azure.cn/kubernetes/charts/ helm repo add incubator http://mirror.azure.cn/kubernetes/charts-incubator/ Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"kubernetes/ingress/":{"url":"kubernetes/ingress/","title":"Ingress Controller","keywords":"","body":" kubernetes支持多种Ingress Controllers (Traefik / Kong / Istio / Nginx 等) Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"kubernetes/ingress/nginxnc-ingress.html":{"url":"kubernetes/ingress/nginxnc-ingress.html","title":"部署nginxnc","keywords":"","body":"Ingress Controller部署之nginxinc kubectl apply -f https://ysicing.me/hack/k7s/install/nginx-ingress/nginx-ingress.yml 部署文档 nginxinc/kubernetes-ingress v1.6.0 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"kubernetes/ack/":{"url":"kubernetes/ack/","title":"ACK实践","keywords":"","body":"阿里云ACK实践 重点介绍阿里云ACK集群实践 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"kubernetes/ack/ingress.html":{"url":"kubernetes/ack/ingress.html","title":"新增内网slb ingress","keywords":"","body":"ACK 添加内网负载均衡 先已经创建好内网slb,获取slb的ID为lb-xxxx # intranet-slb-ingress.yml apiVersion: v1 kind: Service metadata: # 这里服务取名为nginx-ingress-lb-intranet name: nginx-ingress-lb-intranet namespace: kube-system labels: app: nginx-ingress-lb-intranet annotations: # 指明SLB实例地址类型为私网类型 service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet # 修改为您的私网SLB实例ID service.beta.kubernetes.io/alicloud-loadbalancer-id: lb-xxxx # 是否自动创建SLB端口监听（会覆写已有端口监听），也可手动创建端口监听 service.beta.kubernetes.io/alicloud-loadbalancer-force-override-listeners: 'true' spec: type: LoadBalancer # route traffic to other nodes externalTrafficPolicy: \"Cluster\" ports: - port: 80 name: http targetPort: 80 - port: 443 name: https targetPort: 443 selector: # select app=ingress-nginx pods app: ingress-nginx 生效内网slb kubectl apply -f intranet-slb-ingress.yml 查看slb nginx-ingress-lb LoadBalancer 172.x.x.x 39.x.x.x 80:31110/TCP,443:31574/TCP 20h nginx-ingress-lb-intranet LoadBalancer 172.x.x.x 10.x.x.x 80:30740/TCP,443:30852/TCP 73m Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"linux/":{"url":"linux/","title":"Linux","keywords":"","body":"Linux姿势 linux management note Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"linux/linux.html":{"url":"linux/linux.html","title":"Debian使用技巧","keywords":"","body":"Linux 快速启动一个Debian环境 Debian 9.11 vagrant init ysicing/debian --box-version 9.11.0 vagrant up Debian 10.2 vagrant init ysicing/debian vagrant up 源码 构建box源码 debian-vagrant Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"linux/init.html":{"url":"linux/init.html","title":"初始化","keywords":"","body":"初始化Debian 基础环境配置和安装docker配置 操作 git clone https://github.com/ysicing/play-ansible.git cd play-ansible # 安装ansible,可跳过 ./install.sh # 配置初始化机器 cp inventory.ini.example inventory.ini # 执行初始化 ansible-playbook init.yml 或者参考 k8s安装部分 容器化方式初始化 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"linux/reinstall.html":{"url":"linux/reinstall.html","title":"在线重装","keywords":"","body":"在线重装Debian 背景 一条命令快速重装干净的Linux环境 目前仅支持Debian(不会不打算支持其他系统) 基于萌咖大佬的二次魔改 默认做了 默认root密码 vagrant(安装完成建议修改，禁止密码登录) 默认配置源为mirrors.tuna.tsinghua.edu.cn,默认添加了security,backports 默认时区为Asia/Shanghai 默认安装了curl wget openssh-server sudo sed apt-transport-https net-tools等常用工具 同时默认支持自定义密码 安装 curl -sSL https://ysicing.me/hack/reinstall/install.sh | bash # 指定参数 bash 自定义硬盘 存在多个硬盘时，需要下载 https://ysicing.me/hack/reinstall/installhk.sh文件，编辑如下部分即可 d-i partman-auto/disk string /dev/sdb 参考附录 [ Linux VPS ] Debian/Ubuntu/CentOS 网络安装/重装系统/纯净安装 一键脚本 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"linux/aliyun_debian_upgrade_kernel.html":{"url":"linux/aliyun_debian_upgrade_kernel.html","title":"轻量云升级内核","keywords":"","body":"阿里云轻量应用服务器升级内核 升级有风险请慎重哦 配置说明 阿里云HK 1核2G2TB30Mbps ¥34/m Debian 8.9 更新源 需要移除默认源，使用如下源 # /etc/apt/sources.list deb http://mirror.xtom.com.hk/debian/ stretch main contrib non-free # deb-src http://mirror.xtom.com.hk/debian/ stretch main contrib non-free deb http://mirror.xtom.com.hk/debian/ stretch-updates main contrib non-free # deb-src http://mirror.xtom.com.hk/debian/ stretch-updates main contrib non-free deb http://mirror.xtom.com.hk/debian/ stretch-backports main contrib non-free # deb-src http://mirror.xtom.com.hk/debian/ stretch-backports main contrib non-free deb http://mirror.xtom.com.hk/debian-security/ stretch/updates main contrib non-free #deb-src http://mirror.xtom.com.hk/debian-security/ stretch/updates main contrib non-free 更新升级 apt-get update apt-get dist-upgrade 升级到最新内核 apt-get install -t stretch-backports linux-image-amd64 update-grub reboot 升级完成后docker无法启动 prior storage driver aufs failed: driver not supported 删除/var/lib/docker，docker存储由aufs变成overlay2 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"linux/timers.html":{"url":"linux/timers.html","title":"定时器","keywords":"","body":"定时任务，如每65分钟执行一次 crontab 定时任务 65 分钟执行一次，怎么写？ 这个时候，用系统自带的crontab就不好实现了,这时候就是systemd该上传了 参考Systemd 定时器教程 cat /etc/systemd/system/example.timer [Unit] Description=example timer [Timer] OnUnitActiveSec=1h Unit=example.service [Install] WantedBy=multi-user.target cat /etc/systemd/system/example.service [Unit] Description=example [Service] ExecStart= [Install] WantedBy=multi-user.target 定制定时器 OnActiveSec：定时器生效后，多少时间开始执行任务 OnBootSec：系统启动后，多少时间开始执行任务 OnStartupSec：Systemd 进程启动后，多少时间开始执行任务 OnUnitActiveSec：该单元上次执行后，等多少时间再次执行 OnUnitInactiveSec： 定时器上次关闭后多少时间，再次执行 OnCalendar：基于绝对时间，而不是相对时间执行 AccuracySec：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒 Unit：真正要执行的任务，默认是同名的带有.service后缀的单元 Persistent：如果设置了该字段，即使定时器到时没有启动，也会自动执行相应的单元 WakeSystem：如果系统休眠，是否自动唤醒系统 Timer和Service大体用法一致 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"linux/faq.html":{"url":"linux/faq.html","title":"FAQ","keywords":"","body":"FAQ docker npm安装问题 npm config set unsafe-perm true git操作 # 改崩了 git fetch --all git reset --hard origin/master # 放弃本地全部/单个 git checkout . git checkout -- filename Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"storage/storage.html":{"url":"storage/storage.html","title":"存储","keywords":"","body":"存储 主要介绍常用存储安装使用 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"storage/nfs.html":{"url":"storage/nfs.html","title":"NFS","keywords":"","body":"NFS存储 Debian # 安装 apt update apt install -y nfs-kernel-server # 配置 mkdir /k8sdata echo \"/k8sdata/ *(insecure,rw,sync,no_root_squash,no_subtree_check)\" > /etc/exports # 启动nfs systemctl enable rpcbind systemctl enable nfs-server systemctl start rpcbind systemctl start nfs-server exportfs -r # 测试 showmount -e 127.0.0.1 CentOS # 安装nfs yum install -y nfs-utils # 配置共享目录 mkdir /k8sdata echo \"/k8sdata *(insecure,rw,sync,no_root_squash)\" > /etc/exports # 启动nfs systemctl enable rpcbind systemctl enable nfs-server systemctl start rpcbind systemctl start nfs-server exportfs -r # 测试 showmount -e 127.0.0.1 k8s集群部署nfs # 未安装存储 curl https://ysicing.me/hack/k7s/install/nfs/deploy.sh | bash # 已安装存储 kubectl apply -f https://ysicing.me/hack/k7s/install/nfs/deploy.yaml Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"docker/":{"url":"docker/","title":"Docker","keywords":"","body":"docker使用 不会特别强调docker具体使用 docker快速安装 curl -fsSL https://ysicing.me/hack/docker/install.sh | bash 做了如下设置 { \"registry-mirrors\": [\"https://dockerhub.azk8s.cn\",\"https://reg-mirror.qiniu.com\"], \"bip\": \"172.30.42.1/16\", \"max-concurrent-downloads\": 10, \"log-driver\": \"json-file\", \"log-level\": \"warn\", \"log-opts\": { \"max-size\": \"20m\", \"max-file\": \"2\" }, \"storage-driver\": \"overlay2\" } docker常用工具安装 docker run --rm -v /usr/local/bin:/sysdir ysicing/tools tar zxf /pkg.tgz -C /sysdir 内置了 etcdctl helm(v3) docker-compose calicoctl ctop cclear (清理退出容器) din (进入容器 din cid> ash/bash(默认)/sh) dps (容器状态) etcdcli (特别支持k8s集群的etcd) kbtoken (查看kuboard admin用户token) kdtoken (查看dashboard-admin 用户token) Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"soft/":{"url":"soft/","title":"开源软件","keywords":"","body":"开源软件部署 记录常用开源软件使用方式 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"soft/dns/adguard.html":{"url":"soft/dns/adguard.html","title":"DNS-Adguard","keywords":"","body":"AdGuard使用姿势 AdGuard Home使用Golang开发，因此安装非常简单，这里以容器的方式部署为例，其它方式可参考官方帮助文档。 主要功能 拦截AD 号称隐私保护 家庭保护模式 自定义过滤(劫持) (&#x1F602;我用的最多的是这个) 部署 二话不说直接上 # docker-compose.yaml version: '2.1' services: caddy: image: spanda/caddy container_name: caddy volumes: - ./ssl:/root/.caddy - /var/log/caddy:/var/log/caddy - ./Caddyfile:/etc/Caddyfile network_mode: host restart: always dns: image: adguard/adguardhome container_name: dns volumes: - ./ad/conf:/opt/adguardhome/conf - ./ad/work:/opt/adguardhome/work network_mode: host restart: always # Caddyfile dns.ysicing.net { gzip tls root@ysicing.net log / /var/log/caddy/dns.ysicing.net.log \"{remote} {when} {method} {uri} {proto} {status} {size} {>User-Agent} {latency}\" { rotate_size 50 rotate_age 90 rotate_keep 20 rotate_compress } header / { Strict-Transport-Security \"max-age=31536000;includeSubDomains;preload\" Access-Control-Allow-Origin * Access-Control-Allow-Methods \"GET, POST, OPTIONS\" -Server } proxy / 127.0.0.1:7070 { transparent websocket } } 访问公网IP:3000,按着无脑一顿猛操作。修改默认web监听端口为127.0.0.1:7070,53端口默认监听全部。 使用 Windows 打开网络和Internet设置 打开网络和共享中心 打开以太网 打开属性 编辑TCP/IPV4 使用下面的DNS服务器 首 59.110.220.53 备 8.8.8.8 Mac 跳过很简单 安卓 自己折腾吧，私有dns搞不定，官方APP可以 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"soft/ldap/openldap_install.html":{"url":"soft/ldap/openldap_install.html","title":"OpenLDAP","keywords":"","body":"OpenLDAP安装初体验 简介这里不在描述，google即可 docke快速部署 version: '2' services: openldap: image: osixia/openldap:1.3.0 container_name: openldap environment: LDAP_LOG_LEVEL: \"256\" LDAP_ORGANISATION: \"Godu Inc.\" LDAP_DOMAIN: \"ysicing.me\" LDAP_BASE_DN: \"\" LDAP_ADMIN_PASSWORD: \"meadmin\" LDAP_CONFIG_PASSWORD: \"meconfig\" LDAP_READONLY_USER: \"true\" LDAP_READONLY_USER_USERNAME: \"readonly\" LDAP_READONLY_USER_PASSWORD: \"readonly\" LDAP_RFC2307BIS_SCHEMA: \"false\" LDAP_BACKEND: \"mdb\" LDAP_TLS: \"false\" LDAP_REPLICATION: \"false\" KEEP_EXISTING_CONFIG: \"false\" LDAP_REMOVE_CONFIG_AFTER_SETUP: \"true\" LDAP_SSL_HELPER_PREFIX: \"ldap\" tty: true stdin_open: true ports: - \"389:389\" - \"636:636\" domainname: \"ldap.ysicing.me\" # important: same as hostname # hostname: \"ldap.ysicing.me\" command: [\"--copy-service\", \"--loglevel\", \"debug\"] phpldapadmin: image: osixia/phpldapadmin:latest container_name: phpldapadmin environment: PHPLDAPADMIN_LDAP_HOSTS: \"openldap\" PHPLDAPADMIN_HTTPS: \"false\" ports: - \"8080:80\" depends_on: - openldap 验证 din openldap ldapsearch -x -H ldap://localhost -b dc=ysicing,dc=me -D 'cn=admin,dc=ysicing,dc=me' -w meadmin 或者访问127.0.0.1:8080 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"shell/":{"url":"shell/","title":"Shell","keywords":"","body":"shell相关 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"shell/awk-func.html":{"url":"shell/awk-func.html","title":"awk 中关于多个$的用法","keywords":"","body":"awk 中关于多个$的用法 上周有遇到过这个问题 awk '{print $$1}' 这个$$是什么用法呢 间接字段寻址,其类似 awk '{print $$1}' ===> awk '{print $($1)}' ===> awk '{Nr=$1; print $Nr}' 示例: $ echo -e \"1 b c d\\n2 b c d\\n3 b c d\\n4 b c d\" 1 b c d 2 b c d 3 b c d 4 b c d $ echo -e \"1 b c d\\n2 b c d\\n3 b c d\\n4 b c d\" | awk '{print $$1}' 1 # since filed #1=1 result print first field b # since filed #1=2 result print secondfield c # since filed #1=3 result print third field d # since filed #1=4 result print fourth field 类似$可以根据需要添加更多 awk '{print $$$1}' ===> awk '{print $$($1)}' ===> awk '{print $($($1))}' Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"ide/vim_config.html":{"url":"ide/vim_config.html","title":"IDE工具-vim配置","keywords":"","body":"vim配置 安装vim plug curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 写配置 向~/.vimrc写入 \" autocmd BufWritePost $MYVIMRC source $MYVIMRC \" 关闭兼容模式 set nocompatible \" 设置行号 set nu \"突出显示当前行,列 set cursorline set cursorcolumn \"显示括号匹配 set showmatch \" tab 缩进 set tabstop=4 \" 设置Tab长度为4空格 set shiftwidth=4 \" 设置自动缩进长度为4空格 set autoindent \" 继承前一行的缩进方式，适用于多行注释 \" 定义快捷键的前缀，即 let mapleader=\";\" \" ==== 系统剪切板复制粘贴 ==== \" v 模式下复制内容到系统剪切板 vmap c \"+yy \" n 模式下复制一行到系统剪切板 nmap c \"+yy \" n 模式下粘贴系统剪切板的内容 nmap v \"+p \" 开启实时搜索 set incsearch \" 搜索时大小写不敏感 set ignorecase syntax enable syntax on \" 开启文件类型侦测 filetype plugin indent on \" 启用自动补全 \" 退出插入模式指定类型的文件自动保存 au InsertLeave *.go,*.sh,*.php write \" 插件 call plug#begin('~/.vim/plugged') \" 可以快速对齐的插件 Plug 'junegunn/vim-easy-align' \" 用来提供一个导航目录的侧边栏 Plug 'scrooloose/nerdtree' \" 可以在导航目录中看到 git 版本信息 Plug 'Xuyuanp/nerdtree-git-plugin' \" 自动补全括号的插件，包括小括号，中括号，以及花括号 Plug 'jiangmiao/auto-pairs' \" 可以在 vim 中使用 tab 补全 Plug 'vim-scripts/SuperTab' Plug 'majutsushi/tagbar' \" go 主要插件 Plug 'fatih/vim-go', { 'tag': '*' } \" go 中的代码追踪，输入 gd 就可以自动跳转 Plug 'dgryski/vim-godef' call plug#end() 安装插件 vim ~/.vimrc # 安装插件 :PlugInstall # 更新插件 :PlugUpdate Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"appendix/":{"url":"appendix/","title":"附录说明","keywords":"","body":"附录说明 用于记录发现的有用/有趣的Github项目 20191219 book prometheus 20191208 kubewatch Watch k8s events and trigger Handlers Go 20191121 overlay networking tool slackhq/nebula 20191104 KubeOperator 一键部署和管理生产级别的 Kubernetes 集群 20191010 Status Page statusfy NodeJS 20191009 Status Page statping Go 20191006 iptv 20190927 Collection of Prometheus alerting rules 20190926 listen1 听歌神器 20190925 一个基于Go的Telegram RSS Bot机器人，支持应用内阅读预览 kubernetes app kubeapp 20190924 octant k8s Go 20190920 gopub 发布系统(不维护) PrometheusAlert Go 20190919 felix SSH and RESTful scaffold for Backend and DevOps engineers Go kplcloud基于Kubernetes的应用管理平台 Go Git服务webhook Go 20190916 &#x1F575;️‍♀️ 监视我的手机：数据都去哪儿了？ Python 20190915 &#x1F36D; 集合多家 API 的新一代图床auxpi Go 20190913 TeaWeb-可视化的Web代理服务 Go 20190912 SmartPing 一款开源、高效、便捷的网络质量监控神器！Go 20190911 Mysql web端sql审核平台Yearning Go 简单可信赖的任务管理工具 Go 20190908 Linux透明代理 运维管理平台flask Python 20190906 kubernetes高可用安装工具sealos GO 基于Vue框架构建的github数据可视化平台GitDataV VUE 20190904 nging 基于caddy的网站服务程序，带图形化管理界面 20190903 Aria2-AriaNg-X docker-compose 20190823 trivy 容器的简单而全面的漏洞扫描程序 Go 20190813 anytunnel 开源内网穿透商用平台系统 Go 扩展企业安全测试主动诱导型蜜罐框架系统 Go Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"appendix/macOS-apps.html":{"url":"appendix/macOS-apps.html","title":"macOS常用工具","keywords":"","body":"macOS 常用工具 个人常用工具列表 iTerm2(终端) Sourcetree(git工具) Dash(文档工具) iHosts(hosts编辑器) Microsoft To Do(Todo) pap.er(壁纸) ZeroTier(内网穿透) Xmind Pixiu(记账) Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "},"appendix/about.html":{"url":"appendix/about.html","title":"关于","keywords":"","body":"关于 姑且算我的博客吧，&#x1F436;! 集群 *.godu.dev 大陆&#x1F1E8;&#x1F1F3;k8s集群 *.ysicing.me 香港&#x1F1ED;&#x1F1F0;k8s集群 *.k7s.xyz 本地k8s集群 Copyright © 2019 | 仅供学习参考,不可用于其他途径. all right reserved，powered by Gitbook Updated at 2020-01-01 00:06:32 "}}