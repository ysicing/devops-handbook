<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>kubernetes on 运维指南</title><link>https://ysicing.me/categories/kubernetes/</link><description>Recent content in kubernetes on 运维指南</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>root@ysicing.net (ysicing)</managingEditor><webMaster>root@ysicing.net (ysicing)</webMaster><copyright>©{year}, All Rights Reserved</copyright><lastBuildDate>Fri, 19 Jun 2020 22:30:18 +0800</lastBuildDate><atom:link href="https://ysicing.me/categories/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>使用ergo快速安装k8s1.18.4</title><link>https://ysicing.me/posts/k8s-install-ergo/</link><pubDate>Fri, 19 Jun 2020 22:30:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 19 Jun 2020 22:30:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-install-ergo/</guid><description>基于sealos, 一键高可用，简单上手, 安装k8s 1.18.4版本 准备虚拟机 环境: 3台机器(debian/buster 10.4, 11.11.11.111~11.11.11.113, 2核4G80G存储</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/k8s/k8s02.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>kubernetes</category></item><item><title>开源k8slb工具Metallb</title><link>https://ysicing.me/posts/k8s-slb-metallb/</link><pubDate>Fri, 19 Jun 2020 22:14:20 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 19 Jun 2020 22:14:20 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-slb-metallb/</guid><description>简介 k8s的LoadBalancer类型的Service依赖云服务商的Load Balancer, 如阿里云的slb。 当我们把k8s部署在私有云时，需要简单的L</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/graph.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>LoadBalancer</category><category>kubernetes</category></item><item><title>Prometheus Operator 初体验</title><link>https://ysicing.me/posts/prometheus-install/</link><pubDate>Mon, 25 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 25 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/prometheus-install/</guid><description>通过Operator创建Prometheus 脚本部署 # 在之前的基础上，配置了存储storageclass git clone https://github.com/ysicing/prometheus.git cd prometheus # prometheus-service/prometheus-storageclass.yaml #配置存储 bash -x ./deploy.sh # 在管</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/k8s/prometheus-icon-color.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>prometheus</category><category>kubernetes</category><category>prometheus</category></item><item><title>ergo安装ingress安装</title><link>https://ysicing.me/posts/ingress-install/</link><pubDate>Sat, 23 May 2020 03:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sat, 23 May 2020 03:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/ingress-install/</guid><description>域名相关 默认情况下, 本地环境域名测试 *.k7s.xyz 11.11.11.111 *.slb.k7s.xyz 11.11.11.112 *.vlb.k7s.xyz 11.11.11.113 ergo安装 Usage: ergo install ingress [flags] Flags: -h, --help help for ingress --ingresstype string ingress: nginx-ingress, traefik, ingress-nginx (default &amp;quot;ingress-nginx&amp;quot;) Global Flags: --config string config file (default is $HOME/.doge/config.yaml) --ip strings 需要安装节点ip (default [11.11.11.111])</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>ingress</category><category>kubernetes</category></item><item><title>ACK 添加内网负载均衡</title><link>https://ysicing.me/posts/aliyun-ack-ingress/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/aliyun-ack-ingress/</guid><description>先已经创建好内网slb,获取slb的ID为lb-xxxx # intranet-slb-ingress.yml apiVersion: v1 kind: Service metadata: # 这里服务取名为nginx-ingress-lb-intranet name: nginx-ingress-lb-intranet</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/graph.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>ingress</category><category>kubernetes</category><category>ack</category><category>kubernetes</category></item><item><title>debian按照k3s</title><link>https://ysicing.me/posts/k3s-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k3s-install/</guid><description>k3s 是Rancher推出的轻量级 k8s. 升级内核版本 apt update apt dist-upgrade apt install -t buster-backports linux-image-amd64 -y update-grub reboot # 内核 Linux cn2 5.6.0-0.bpo.2-amd64 #1 SMP Debian 5.6.14-2~bpo10+1 (2020-06-09) x86_64 GNU/Linux 具体可以参考 Debian个人常用操作指南 升级内</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>k3s</category><category>kubernetes</category></item><item><title>k8s实践之calico mtu</title><link>https://ysicing.me/posts/k8s-calico-mtu/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-calico-mtu/</guid><description>Ucloud 网络 ucloud默认mtu是 1454 所以calico需要改mtu kubectl patch configmap/calico-config -n kube-system --type merge -p '{&amp;quot;data&amp;quot;:{&amp;quot;veth_mtu&amp;quot;: &amp;quot;1404&amp;quot;}}' 参考 Configure MTU to maximize network performance</description><dc:creator>ysicing</dc:creator><category>calico</category><category>kubernetes</category></item><item><title>k8s实践之基础概念</title><link>https://ysicing.me/posts/k8s-intro-base/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-intro-base/</guid><description>概念篇 Kubernetes 基本概念和使用方法 架构 etcd保存了整个集群的状态； apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s实践之安装linkerdv2</title><link>https://ysicing.me/posts/k8s-linkerd-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-linkerd-install/</guid><description>安装linkerd v2 安装二进制 docker run --rm -v /usr/local/bin:/sysdir ysicing/tools tar zxf /pkg.tgz -C /sysdir 获取相关镜像 1 2 3 linkerd install --ignore-cluster | grep image: | sed -e &amp;#39;s/^ *//&amp;#39; | sort | uniq | awk &amp;#39;{print $2}&amp;#39; | xargs -I {} docker pull {} linkerd install --ignore-cluster | grep image: | sed -e</description><dc:creator>ysicing</dc:creator><category>linkerd</category><category>kubernetes</category></item><item><title>k8s实践之资源管理的权限控制</title><link>https://ysicing.me/posts/k8s-sa/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-sa/</guid><description>k8s 资源管理的权限控制 在k8s中，由系统自身的接口来创建和管理的账号类型只有一种，叫做ServiceAccount。 可以使用下面的命令来查看目</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s实践之部署第一个应用</title><link>https://ysicing.me/posts/k8s-intro-deploy/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-intro-deploy/</guid><description>部署第一个应用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # https://ysicing.me/hack/demo/deploy.</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s常用扩展组件</title><link>https://ysicing.me/posts/k8s-addons/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-addons/</guid><description>扩展了Kubernetes的功能 部署kuboard kubectl apply -f https://ysicing.me/hack/k7s/install/kuboard/deploy.yml # 因为ingress部署关系，所以配置解析域名为ui.slb.k7s.xyz # 管理</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s标签和选择器</title><link>https://ysicing.me/posts/k8s-labels/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-labels/</guid><description>格式要求： 有效标签值必须为 63 个字符或更少，并且必须为空或以字母数字字符（[a-z0-9A-Z]）开头和结尾，中间可以包含破折号（-）、下划线</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s配置默认存储</title><link>https://ysicing.me/posts/k8s-default-sc/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-default-sc/</guid><description>配置默认存储 # 集群已有存储类型（StorageClass），执行 kubectl get sc看下当前是否设置了默认的 storageclass kubectl get sc kubectl patch storageclass nfs-data -p '{&amp;quot;metadata&amp;quot;: {&amp;quot;annotations&amp;quot;:{&amp;quot;storageclass.kubernetes.io/is-default-class&amp;quot;:&amp;quot;true&amp;quot;}}}'</description><dc:creator>ysicing</dc:creator><category>存储</category><category>kubernetes</category></item><item><title>kubectl plugin插件机制初体验之krew</title><link>https://ysicing.me/posts/k8s-kubectl-plugins/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-kubectl-plugins/</guid><description>kubectl plugin插件机制初体验之krew 插件机制 这个早就已经GA了，其作用允许开发者以独立的二进制或脚本形式发布自定义的kubectl子命令,</description><dc:creator>ysicing</dc:creator><category>krew</category><category>kubernetes</category></item><item><title>minikube安装k8s</title><link>https://ysicing.me/posts/k8s-minikube-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-minikube-install/</guid><description>minikube安装k8s MacOS安装 1 brew install minikube 1 2 # PROXY可以根据自己需要设置，可不设置 minikube start --cpus=2 --memory 4g --disk-size=40g --driver=virtualbox --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --nodes=2 --docker-env HTTP_PROXY=http://192.168.99.1:7890 --docker-env HTTPS_PROXY=http://192.168.99.1:7890 --docker-env NO_PROXY=127.0.0.1/32,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,localhost</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>NFS存储</title><link>https://ysicing.me/posts/nfs-install-k8s/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/nfs-install-k8s/</guid><description>NFS存储 Debian # 安装 apt update apt install -y nfs-kernel-server # 配置 mkdir /k8sdata echo &amp;quot;/k8sdata/ *(insecure,rw,sync,no_root_squash,no_subtree_check)&amp;quot; &amp;gt; /etc/exports # 启动nfs systemctl enable rpcbind systemctl enable nfs-server systemctl start rpcbind systemctl start nfs-server exportfs -r # 测试 showmount -e 127.0.0.1 CentOS # 安装nfs yum install -y nfs-utils # 配置共享目录 mkdir</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>nginx ingress 配置域名证书</title><link>https://ysicing.me/posts/k8s-ingress-tls-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-ingress-tls-config/</guid><description>nginx ingress 配置域名证书(默认以ingress-nginx为例) 创建证书 默认已经签发证书 创建 secret 创建好证书以后，需要将证书内容放到 secret 中，secret 中</description><dc:creator>ysicing</dc:creator><category>ingress</category><category>kubernetes</category><category>kubernetes</category></item><item><title>开启集群feature开启集群feature</title><link>https://ysicing.me/posts/k8s-feature/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-feature/</guid><description>ttlSecondsAfterFinished 自动清理完成和失败的Job，目前该特性默认不启用。如何判断未启用,查看job资源，在spec里未发现ttlSecondsAfterFini</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item></channel></rss>