<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>博文 on 运维指南</title><link>https://ysicing.me/posts/</link><description>Recent content in 博文 on 运维指南</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>root@ysicing.net (ysicing)</managingEditor><webMaster>root@ysicing.net (ysicing)</webMaster><copyright>©2021, All Rights Reserved</copyright><lastBuildDate>Thu, 07 Oct 2021 17:16:45 +0800</lastBuildDate><atom:link href="https://ysicing.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Containerd 使用教程之nerdctl</title><link>https://ysicing.me/posts/containerd-nerdctl/</link><pubDate>Thu, 07 Oct 2021 17:16:45 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Thu, 07 Oct 2021 17:16:45 +0800</atom:modified><guid>https://ysicing.me/posts/containerd-nerdctl/</guid><description>默认本文演示环境为Debian GNU/Linux 11 (bullseye) 安装 nerdctl默认提供了两个压缩包 nerdctl-0.12.1-linux-amd64.tar.gz, 仅包含nerdctl nerdctl-full-0.12.1-linux-amd64.tar.gz, 包含了runc和作为k8s容器运行时所需的</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/cri/containerd.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>containerd</category><category>nerdctl</category><category>containerd</category></item><item><title>Tailscale内网穿透新姿势</title><link>https://ysicing.me/posts/tailscale-k8s-mesh-network/</link><pubDate>Sat, 02 Oct 2021 10:39:15 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sat, 02 Oct 2021 10:39:15 +0800</atom:modified><guid>https://ysicing.me/posts/tailscale-k8s-mesh-network/</guid><description>很久就用上了,用于替代之前自行部署的wireguard mesh组网 Token申请 申请两个token, 一个用于pod,一个用于svc helm 安装 1 2</description><dc:creator>ysicing</dc:creator><category>wireguard</category><category>tailscale</category><category>kubernetes</category><category>内网穿透</category><category>内网穿透</category></item><item><title>群晖新套件：Tailscale极速组网</title><link>https://ysicing.me/posts/tailscale-working-nas-dsm7/</link><pubDate>Sat, 02 Oct 2021 10:36:07 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sat, 02 Oct 2021 10:36:07 +0800</atom:modified><guid>https://ysicing.me/posts/tailscale-working-nas-dsm7/</guid><description>最近群晖升级到DSM7了,决定使用Tailscale替代之前自行部署的wireguard mesh组网 简介 Tailscale属于一种虚拟组网工</description><dc:creator>ysicing</dc:creator><category>wireguard</category><category>tailscale</category><category>群晖</category><category>内网穿透</category><category>内网穿透</category><category>群晖</category></item><item><title>k3s使用Cilium替换默认Flannel</title><link>https://ysicing.me/posts/how-to-use-cilium-to-replace-k3s-flannel/</link><pubDate>Fri, 24 Sep 2021 18:35:25 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 24 Sep 2021 18:35:25 +0800</atom:modified><guid>https://ysicing.me/posts/how-to-use-cilium-to-replace-k3s-flannel/</guid><description>系统要求 k3s &amp;gt;= 1.16,(默认v1.21.5+k3s1) Debian 11，(默认5.10) 修改k3s配置 1 2 3 cat /etc/systemd/system/k3s.service --flannel-backend none \ 将网络默认设置为none 移除网络</description><dc:creator>ysicing</dc:creator><category>k3s</category><category>cilium</category><category>容器</category><category>k3s</category></item><item><title>Containerd 使用教程</title><link>https://ysicing.me/posts/getting-started-with-containerd/</link><pubDate>Mon, 13 Sep 2021 17:16:45 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 13 Sep 2021 17:16:45 +0800</atom:modified><guid>https://ysicing.me/posts/getting-started-with-containerd/</guid><description>默认本文演示环境为Debian GNU/Linux 11 (bullseye) 安装 containerd默认提供了两个压缩包 containerd-1.5.5-linux-amd64.tar.gz cri-containerd-cni-1.5.5-linux-amd64.tar.gz, 包含了runc和作为k8s容器运行时所需的cni文件 默认</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/cri/containerd.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>containerd</category><category>cri</category><category>containerd</category></item><item><title>部署Kubernetes Dashboard</title><link>https://ysicing.me/posts/k8s-kubernetes-dashboard-install/</link><pubDate>Wed, 08 Sep 2021 12:59:51 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Wed, 08 Sep 2021 12:59:51 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-kubernetes-dashboard-install/</guid><description>简单记录一下快速安装dashboard 安装 1 kubectl apply -f https://sh.ysicing.me/k8s/dashboard/recommended.yaml 授权 授权集群管理员权限, 默认用户为super-kd-user 1 kubectl apply -f https://sh.ysicing.me/k8s/dashboard/admin.yaml 获取token 获取</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/k8s/k8s02.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>kubernetes</category></item><item><title>Proxy China</title><link>https://ysicing.me/posts/proxy-china/</link><pubDate>Mon, 06 Sep 2021 12:00:17 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 06 Sep 2021 12:00:17 +0800</atom:modified><guid>https://ysicing.me/posts/proxy-china/</guid><description/><dc:creator>ysicing</dc:creator></item><item><title>Lima虚拟机初体验二</title><link>https://ysicing.me/posts/lima-vm-on-macos-m1/</link><pubDate>Sun, 05 Sep 2021 20:16:57 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sun, 05 Sep 2021 20:16:57 +0800</atom:modified><guid>https://ysicing.me/posts/lima-vm-on-macos-m1/</guid><description>接上文Lima虚拟机初体验一在M1上玩转Lima 快速开始 M1系统信息 # brew install m-cli ➜ ~ m info ProductName: macOS ProductVersion: 11.5.2 BuildVersion: 20G95 m1 patch # 安装构建依赖 brew update brew install libffi gettext glib pkg-config autoconf automake pixman ninja #</description><dc:creator>ysicing</dc:creator><category>vm</category><category>debian</category><category>macOS</category><category>macOS</category></item><item><title>Lima虚拟机初体验一</title><link>https://ysicing.me/posts/lima-vm-on-macos/</link><pubDate>Sun, 05 Sep 2021 10:16:57 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sun, 05 Sep 2021 10:16:57 +0800</atom:modified><guid>https://ysicing.me/posts/lima-vm-on-macos/</guid><description>什么是Lima Linux virtual machines on macOS 即专注于在macOS上支持文件共享、端口转发和使用 containerd 的 Linux 虚拟机, 其诞生的初衷是推广在macOS上使用containe</description><dc:creator>ysicing</dc:creator><category>vm</category><category>debian</category><category>macOS</category><category>macOS</category></item><item><title>Debian11配置Locales</title><link>https://ysicing.me/posts/debian11-locales/</link><pubDate>Wed, 01 Sep 2021 10:24:49 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Wed, 01 Sep 2021 10:24:49 +0800</atom:modified><guid>https://ysicing.me/posts/debian11-locales/</guid><description>前几天升级Debian11后, 使用iTerm登录机器提示: perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = &amp;quot;en_US.utf8&amp;quot;, LC_ALL = &amp;quot;en_US.UTF-8&amp;quot;, LC_TERMINAL = &amp;quot;iTerm2&amp;quot;, LANG = &amp;quot;en_US.utf8&amp;quot; are supported and installed on your system. perl: warning: Falling back to the standard locale (&amp;quot;C&amp;quot;).</description><dc:creator>ysicing</dc:creator><category>debian</category><category>debian</category></item><item><title>Caddy2插件Geocn</title><link>https://ysicing.me/posts/caddy2-plugin-geocn/</link><pubDate>Tue, 31 Aug 2021 16:00:25 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Tue, 31 Aug 2021 16:00:25 +0800</atom:modified><guid>https://ysicing.me/posts/caddy2-plugin-geocn/</guid><description>为什么要Geocn 大部分场景下,我们网站允许任何人访问, 某些特殊场景下我们需要限制大陆ip访问。 但是已有插件caddy-maxmind-ge</description><dc:creator>ysicing</dc:creator><category>caddy</category><category>caddy-plugin</category><category>caddy</category></item><item><title>Debian 11安装k3s</title><link>https://ysicing.me/posts/k3s-install-bullseye/</link><pubDate>Sun, 15 Aug 2021 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sun, 15 Aug 2021 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k3s-install-bullseye/</guid><description>k3s 是Rancher推出的轻量级 k8s. 升级debian10(buster)内核版本 1 2 3 4 5 6 7 8 9 sed -i &amp;#39;s/buster\/updates/bullseye-security/g;s/buster/bullseye/g&amp;#39; /etc/apt/sources.list apt update apt dist-upgrade -y # apt install -t bullseye-backports linux-image-amd64 -y # update-grub # reboot # 内核</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>k3s</category><category>debian</category><category>kubernetes</category></item><item><title>k8s 上利用 cert-manager 自动签发 TLS 证书</title><link>https://ysicing.me/posts/cert-manager-install/</link><pubDate>Mon, 26 Oct 2020 11:02:44 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 26 Oct 2020 11:02:44 +0800</atom:modified><guid>https://ysicing.me/posts/cert-manager-install/</guid><description>概述 随着互联网发展，https越来越普及，是个网站都要上个https，否则就是非主流哈哈哈。之前也介绍过caddy，自动签发https证书，</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>使用Artifactory部署私有化软件源</title><link>https://ysicing.me/posts/artifactory-setup-mirrors/</link><pubDate>Wed, 30 Sep 2020 22:01:08 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Wed, 30 Sep 2020 22:01:08 +0800</atom:modified><guid>https://ysicing.me/posts/artifactory-setup-mirrors/</guid><description>趁着节前，需要折(dao)腾(shi)一下去年部署的artifactory镜像源，并将升级到7.x版本。 场景 部署私有化软件源，对内提供服务。</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/code-file.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Artifactory</category></item><item><title>群晖配置Clash</title><link>https://ysicing.me/posts/clash-dsm/</link><pubDate>Sun, 20 Sep 2020 21:05:54 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sun, 20 Sep 2020 21:05:54 +0800</atom:modified><guid>https://ysicing.me/posts/clash-dsm/</guid><description>趁着搬家，需要折(dao)腾(shi)一下吃灰的群晖，将Clash升级到2.0 准备clash配置文件 由于日常使用clashx，这里就不介绍如</description><dc:creator>ysicing</dc:creator><category>clash</category></item><item><title>Caddy2初体验</title><link>https://ysicing.me/posts/caddy2/</link><pubDate>Wed, 16 Sep 2020 07:38:56 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Wed, 16 Sep 2020 07:38:56 +0800</atom:modified><guid>https://ysicing.me/posts/caddy2/</guid><description>Caddy2使用小记 将Caddy升级到 Caddy2， 记录一下。 2.0版本改变挺大的。 环境 腾讯云香港轻量, Debian 10, 秒不可言。 安装caddy2 使用镜</description><dc:creator>ysicing</dc:creator><category>caddy</category></item><item><title>Vagrant从入门到放弃</title><link>https://ysicing.me/posts/vagrant-study/</link><pubDate>Mon, 14 Sep 2020 08:04:15 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 14 Sep 2020 08:04:15 +0800</atom:modified><guid>https://ysicing.me/posts/vagrant-study/</guid><description>源起 有时候跑一些服务，需要在Linux上运行，需要快速拉起分布式开发测试环境配置，不可能通过创建虚拟机安装服务等一系列操作，否则一行命令，一</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/graph.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>vagrant</category></item><item><title>Istio 1.7安装</title><link>https://ysicing.me/posts/istio-install/</link><pubDate>Tue, 01 Sep 2020 21:53:59 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Tue, 01 Sep 2020 21:53:59 +0800</atom:modified><guid>https://ysicing.me/posts/istio-install/</guid><description>安装记录 1 2 3 4 git clone https://github.com/ysicing/istio-install.git cd istio-install istioctl install --set profile=demo --set hub=registry.cn-beijing.aliyuncs.com/k7scn kubectl apply -f . 部署demo kubectl create ns istio-demo kubectl label namespace istio-demo istio-injection=enabled kubectl apply -f example/bookinfo.yaml -n istio-demo</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/istio/istio.webp" medium="image"><media:title type="html">featured image</media:title></media:content><category>istio</category><category>服务治理</category></item><item><title>Consul安装</title><link>https://ysicing.me/posts/consul-install/</link><pubDate>Mon, 03 Aug 2020 20:04:08 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 03 Aug 2020 20:04:08 +0800</atom:modified><guid>https://ysicing.me/posts/consul-install/</guid><description>通过helm快速安装helm # 默认已存在默认sc kubectl get sc nfs-data (default) nfs-data Delete Immediate false 206d 安装consul helminit kubectl create ns gaea-op helm upgrade -i consul --set global.imageRegistry=registry.cn-beijing.aliyuncs.com \ --set image.repository=k7scn/b-consul \ --set volumePermissions.enabled=true \ --set volumePermissions.image.repository=k7scn/b-minideb \ --set persistence.enabled=true \ --set metrics.enabled=true \ --set</description><dc:creator>ysicing</dc:creator><category>consul</category></item><item><title>使用ergo快速安装k8s1.18.4</title><link>https://ysicing.me/posts/k8s-install-ergo/</link><pubDate>Fri, 19 Jun 2020 22:30:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 19 Jun 2020 22:30:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-install-ergo/</guid><description>基于sealos, 一键高可用，简单上手, 安装k8s 1.18.4版本 准备虚拟机 环境: 3台机器(debian/buster 10.4, 11.11.11.111~11.11.11.113, 2核4G80G存储</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/k8s/k8s02.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>kubernetes</category></item><item><title>开源k8slb工具Metallb</title><link>https://ysicing.me/posts/k8s-slb-metallb/</link><pubDate>Fri, 19 Jun 2020 22:14:20 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 19 Jun 2020 22:14:20 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-slb-metallb/</guid><description>简介 kubernetes本身并没有实现LoadBalancer, 如果是云上用户，可以使用云服务商提供k8s的LoadBalancer, 如阿里</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/graph.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>LoadBalancer</category><category>负载均衡</category><category>kubernetes</category></item><item><title>Etcd使用入门</title><link>https://ysicing.me/posts/etcd-op/</link><pubDate>Sun, 31 May 2020 19:54:36 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sun, 31 May 2020 19:54:36 +0800</atom:modified><guid>https://ysicing.me/posts/etcd-op/</guid><description>简介 etcd是CoreOS团队发起的开源项目，目标是构建一个高可用的分布式键值(key-value)数据库。etcd内部采用raft协议作为</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/etcd/etcd-horizontal-color.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>etcd</category><category>etcd</category></item><item><title>在k8s中使用docker in docker</title><link>https://ysicing.me/posts/docker-in-k8s/</link><pubDate>Fri, 29 May 2020 16:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 29 May 2020 16:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/docker-in-k8s/</guid><description>部署 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 # docker.yamlapiVersion:apps/v1kind:StatefulSetmetadata:name:docker-apinamespace:gaea-opannotations:k8s.gaea.me/workload:applabels:k8s.gaea.me/name:docker-apispec:replicas:1template:metadata:labels:k8s.gaea.me/name:docker-apispec:containers:- name:dockerdimage:&amp;#39;docker:18.09.9-dind&amp;#39;securityContext:privileged:true- name:docker-cliimage:&amp;#39;docker:18.09.9&amp;#39;env:- name:DOCKER_HOSTvalue:tcp://127.0.0.1:2375command:[&amp;#34;/bin/sh&amp;#34;]args:[&amp;#34;-c&amp;#34;,&amp;#34;docker info &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; while [ $? -ne 0 ] ; do sleep 3; docker info &amp;gt;/dev/null 2&amp;gt;&amp;amp;1;</description><dc:creator>ysicing</dc:creator><category>docker</category><category>kubernetes</category></item><item><title>Prometheus Operator 初体验</title><link>https://ysicing.me/posts/prometheus-install/</link><pubDate>Mon, 25 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 25 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/prometheus-install/</guid><description>通过Operator创建Prometheus 脚本部署 # 在之前的基础上，配置了存储storageclass git clone https://github.com/ysicing/prometheus.git cd prometheus # prometheus-service/prometheus-storageclass.yaml #配置存储 bash -x ./deploy.sh # 在管</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/k8s/prometheus-icon-color.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>prometheus</category><category>kubernetes</category><category>prometheus</category></item><item><title>helm小记</title><link>https://ysicing.me/posts/helm/</link><pubDate>Sun, 24 May 2020 02:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sun, 24 May 2020 02:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm/</guid><description>安装 安装docker时默认已经安装了helm,如果不是最新版本请upgrade-tools 1 2 3 4 upgrade-tools # 版本 helm version version.BuildInfo{Version:&amp;#34;v3.2.1&amp;#34;, GitCommit:&amp;#34;fe51cd1e31e6a202cba7dead9552a6d418ded79a&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, GoVersion:&amp;#34;go1.13.10&amp;#34;} 配置helm镜像库 1 2</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/helm/helm.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>helm</category><category>helm</category></item><item><title>ergo安装ingress安装</title><link>https://ysicing.me/posts/ingress-install/</link><pubDate>Sat, 23 May 2020 03:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sat, 23 May 2020 03:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/ingress-install/</guid><description>域名相关 默认情况下, 本地环境域名测试 *.k7s.xyz 11.11.11.111 *.slb.k7s.xyz 11.11.11.112 *.vlb.k7s.xyz 11.11.11.113 ergo安装 Usage: ergo install ingress [flags] Flags: -h, --help help for ingress --ingresstype string ingress: nginx-ingress, traefik, ingress-nginx (default &amp;quot;ingress-nginx&amp;quot;) Global Flags: --config string config file (default is $HOME/.doge/config.yaml) --ip strings 需要安装节点ip (default [11.11.11.111])</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>ingress</category><category>kubernetes</category></item><item><title>如何在线重装Debian11</title><link>https://ysicing.me/posts/debian-reinstall/</link><pubDate>Fri, 22 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 22 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/debian-reinstall/</guid><description>1. 背景 云服务商提供的机器可能安装了一些服务组件，如监控等等，想要一个干净的环境。 一条命令快速重装干净的Linux环境 目前仅支持Debian(</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/debian/Debian_logo.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>debian</category><category>debian</category></item><item><title>docker快速安装</title><link>https://ysicing.me/posts/docker/</link><pubDate>Tue, 19 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Tue, 19 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/docker/</guid><description>安装docker curl -fsSL https://sh.ysicing.me/install/docker.sh | bash 或者 ergo install docker -h 做了如下设置 1 2 3 4 5 6 7 8 9 10 11 12 13 { &amp;#34;exec-opts&amp;#34;: [&amp;#34;native.cgroupdriver=systemd&amp;#34;], &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://dyucrs4l.mirror.aliyuncs.com&amp;#34;], &amp;#34;bip&amp;#34;: &amp;#34;169.254.0.1/24&amp;#34;, &amp;#34;max-concurrent-downloads&amp;#34;: 10, &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;, &amp;#34;log-level&amp;#34;: &amp;#34;warn&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;max-size&amp;#34;: &amp;#34;20m&amp;#34;, &amp;#34;max-file&amp;#34;: &amp;#34;2&amp;#34; }, &amp;#34;storage-driver&amp;#34;: &amp;#34;overlay2&amp;#34; } 安装tools docker run</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/cri/docker.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>docker</category><category>cri</category><category>docker</category></item><item><title>ACK 添加内网负载均衡</title><link>https://ysicing.me/posts/aliyun-ack-ingress/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/aliyun-ack-ingress/</guid><description>先已经创建好内网slb,获取slb的ID为lb-xxxx # intranet-slb-ingress.yml apiVersion: v1 kind: Service metadata: # 这里服务取名为nginx-ingress-lb-intranet name: nginx-ingress-lb-intranet</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/graph.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>ingress</category><category>kubernetes</category><category>ack</category><category>kubernetes</category></item><item><title>debian10安装k3s</title><link>https://ysicing.me/posts/k3s-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k3s-install/</guid><description>k3s 是Rancher推出的轻量级 k8s. 升级内核版本 apt update apt dist-upgrade apt install -t buster-backports linux-image-amd64 -y update-grub reboot # 内核 Linux cn2 5.6.0-0.bpo.2-amd64 #1 SMP Debian 5.6.14-2~bpo10+1 (2020-06-09) x86_64 GNU/Linux 具体可以参考 Debian个人常用操作指南 升级内</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>k3s</category><category>kubernetes</category></item><item><title>Ergo Tools</title><link>https://ysicing.me/posts/ergo-tools/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/ergo-tools/</guid><description/><dc:creator>ysicing</dc:creator></item><item><title>Go基础</title><link>https://ysicing.me/posts/go-study-ch1/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/go-study-ch1/</guid><description>变量和常量 关键字&amp;amp;保留字 # 25个保留字 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var # 37个保留字 Constants: true false iota nil Types: int int8 int16 int32 int64 uint uint8 uint16 uint32</description><dc:creator>ysicing</dc:creator><category>go</category><category>go</category></item><item><title>helm部署docker registry</title><link>https://ysicing.me/posts/helm-docker-registry/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm-docker-registry/</guid><description>部署docker registry 最近大陆push镜像老是超时，于是想自建一个，使用helm方式, 和drone安装方式类似 部署 helm pull stable/docker-registry tar xf docker-registry-1.9.1.tgz &amp;amp;&amp;amp; cd docker-registry/ # 编辑val</description><dc:creator>ysicing</dc:creator><category>helm</category></item><item><title>helm部署drone</title><link>https://ysicing.me/posts/helm-drone/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/helm-drone/</guid><description>使用Helm安装Drone 一个比较热门的轻量级CI/CD开源工具：Drone 简介 Drone是用Go开发的开源轻量级CI/CD工具 使用简单的 YAML</description><dc:creator>ysicing</dc:creator><category>drone</category><category>helm</category></item><item><title>k8s实践之calico mtu</title><link>https://ysicing.me/posts/k8s-calico-mtu/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-calico-mtu/</guid><description>Ucloud 网络 ucloud默认mtu是 1454 所以calico需要改mtu kubectl patch configmap/calico-config -n kube-system --type merge -p '{&amp;quot;data&amp;quot;:{&amp;quot;veth_mtu&amp;quot;: &amp;quot;1404&amp;quot;}}' 参考 Configure MTU to maximize network performance</description><dc:creator>ysicing</dc:creator><category>calico</category><category>kubernetes</category></item><item><title>k8s实践之基础概念</title><link>https://ysicing.me/posts/k8s-intro-base/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-intro-base/</guid><description>概念篇 Kubernetes 基本概念和使用方法 架构 etcd保存了整个集群的状态； apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s实践之安装linkerdv2</title><link>https://ysicing.me/posts/k8s-linkerd-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-linkerd-install/</guid><description>安装linkerd v2 安装二进制 docker run --rm -v /usr/local/bin:/sysdir ysicing/tools tar zxf /pkg.tgz -C /sysdir 获取相关镜像 1 2 3 linkerd install --ignore-cluster | grep image: | sed -e &amp;#39;s/^ *//&amp;#39; | sort | uniq | awk &amp;#39;{print $2}&amp;#39; | xargs -I {} docker pull {} linkerd install --ignore-cluster | grep image: | sed -e</description><dc:creator>ysicing</dc:creator><category>linkerd</category><category>kubernetes</category></item><item><title>k8s实践之资源管理的权限控制</title><link>https://ysicing.me/posts/k8s-sa/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-sa/</guid><description>k8s 资源管理的权限控制 在k8s中，由系统自身的接口来创建和管理的账号类型只有一种，叫做ServiceAccount。 可以使用下面的命令来查看目</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s实践之部署第一个应用</title><link>https://ysicing.me/posts/k8s-intro-deploy/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-intro-deploy/</guid><description>部署第一个应用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # https://sh.ysicing.me/k8s/demo/deploy.yamlapiVersion:apps/v1 #与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本kind:D</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s常用扩展组件</title><link>https://ysicing.me/posts/k8s-addons/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-addons/</guid><description>扩展了Kubernetes的功能 部署kuboard kubectl apply -f https://sh.ysicing.me/k7s/install/kuboard/deploy.yml # 因为ingress部署关系，所以配置解析域名为ui.slb.k7s.xyz # 管理</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s标签和选择器</title><link>https://ysicing.me/posts/k8s-labels/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-labels/</guid><description>格式要求： 有效标签值必须为 63 个字符或更少，并且必须为空或以字母数字字符（[a-z0-9A-Z]）开头和结尾，中间可以包含破折号（-）、下划线</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>k8s配置默认存储</title><link>https://ysicing.me/posts/k8s-default-sc/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-default-sc/</guid><description>配置默认存储 # 集群已有存储类型（StorageClass），执行 kubectl get sc看下当前是否设置了默认的 storageclass kubectl get sc kubectl patch storageclass nfs-data -p '{&amp;quot;metadata&amp;quot;: {&amp;quot;annotations&amp;quot;:{&amp;quot;storageclass.kubernetes.io/is-default-class&amp;quot;:&amp;quot;true&amp;quot;}}}'</description><dc:creator>ysicing</dc:creator><category>存储</category><category>kubernetes</category></item><item><title>kubectl plugin插件机制初体验之krew</title><link>https://ysicing.me/posts/k8s-kubectl-plugins/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-kubectl-plugins/</guid><description>kubectl plugin插件机制初体验之krew 插件机制 这个早就已经GA了，其作用允许开发者以独立的二进制或脚本形式发布自定义的kubectl子命令,</description><dc:creator>ysicing</dc:creator><category>krew</category><category>kubernetes</category></item><item><title>minikube安装k8s</title><link>https://ysicing.me/posts/k8s-minikube-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-minikube-install/</guid><description>minikube安装k8s MacOS安装 1 brew install minikube 1 2 # PROXY可以根据自己需要设置，可不设置 minikube start --cpus=2 --memory 4g --disk-size=40g --driver=virtualbox --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers --nodes=2 --docker-env HTTP_PROXY=http://192.168.99.1:7890 --docker-env HTTPS_PROXY=http://192.168.99.1:7890 --docker-env NO_PROXY=127.0.0.1/32,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,localhost</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>NFS存储</title><link>https://ysicing.me/posts/nfs-install-k8s/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/nfs-install-k8s/</guid><description>NFS存储 Debian # 安装 apt update apt install -y nfs-kernel-server # 配置 mkdir /k8sdata echo &amp;quot;/k8sdata/ *(insecure,rw,sync,no_root_squash,no_subtree_check)&amp;quot; &amp;gt; /etc/exports # 启动nfs systemctl enable rpcbind systemctl enable nfs-server systemctl start rpcbind systemctl start nfs-server exportfs -r # 测试 showmount -e 127.0.0.1 CentOS # 安装nfs yum install -y nfs-utils # 配置共享目录 mkdir</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>安装</category><category>kubernetes</category></item><item><title>nginx ingress 配置域名证书</title><link>https://ysicing.me/posts/k8s-ingress-tls-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-ingress-tls-config/</guid><description>nginx ingress 配置域名证书(默认以ingress-nginx为例) 创建证书 默认已经签发证书 创建 secret 创建好证书以后，需要将证书内容放到 secret 中，secret 中</description><dc:creator>ysicing</dc:creator><category>ingress</category><category>kubernetes</category><category>kubernetes</category></item><item><title>OpenLDAP安装初体验</title><link>https://ysicing.me/posts/openldap-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/openldap-install/</guid><description>OpenLDAP安装初体验 简介这里不在描述，google即可 docke快速部署 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description><dc:creator>ysicing</dc:creator><category>ldap</category></item><item><title>Systemd 定时器教程</title><link>https://ysicing.me/posts/systemd-timers/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/systemd-timers/</guid><description>定时任务，如每65分钟执行一次 crontab 定时任务 65 分钟执行一次，怎么写？ 这个时候，用系统自带的crontab就不好实现了,这时候就是systemd该</description><dc:creator>ysicing</dc:creator><category>冷知识</category></item><item><title>vim配置</title><link>https://ysicing.me/posts/vim-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/vim-config/</guid><description>安装vim plug curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 写配置 向~/.vimrc写入 &amp;quot; autocmd BufWritePost $MYVIMRC source $MYVIMRC &amp;quot; 关闭兼容模式 set nocompatible &amp;quot; 设置行号 set nu &amp;quot;突出显示当前行,列 set cursorline set cursorcolumn &amp;quo</description><dc:creator>ysicing</dc:creator><category>vim</category></item><item><title>vscode配置</title><link>https://ysicing.me/posts/vscode-config/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/vscode-config/</guid><description>vscode配置 安装好Go相关插件，配置工具包 使用command+shift+P快捷键,然后键入Go: Install/Update Tools选中全部(根据需要),稍等</description><dc:creator>ysicing</dc:creator><category>vscode</category><category>go</category></item><item><title>使用nvm进行node版本管理</title><link>https://ysicing.me/posts/nodejs-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/nodejs-install/</guid><description>使用nvm进行node版本管理 安装nvm 1 2 3 4 5 6 7 8 9 10 11 12 13 # 安装 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash # 默认会写.zshrc ### .zshrc nvm start export NVM_DIR=&amp;#34;$HOME/.nvm&amp;#34; [ -s &amp;#34;$NVM_DIR/nvm.sh&amp;#34; ] &amp;amp;&amp;amp; \. &amp;#34;$NVM_DIR/nvm.sh&amp;#34; # This loads nvm [</description><dc:creator>ysicing</dc:creator><category>nodejs</category></item><item><title>内网穿透之wireguard</title><link>https://ysicing.me/posts/wireguard-install/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/wireguard-install/</guid><description>内网穿透之wireguard 安装 Debian # Debian Bullseye 之前版本都需要启用backports源来支持安装 apt install wireguard -y macOS brew install wireguard-tools 配置服务端 cd /etc/wireguard # 创建服务端密钥对 umask 077</description><dc:creator>ysicing</dc:creator><category>wireguard</category><category>内网穿透</category><category>内网穿透</category></item><item><title>开启集群feature开启集群feature</title><link>https://ysicing.me/posts/k8s-feature/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/k8s-feature/</guid><description>ttlSecondsAfterFinished 自动清理完成和失败的Job，目前该特性默认不启用。如何判断未启用,查看job资源，在spec里未发现ttlSecondsAfterFini</description><dc:creator>ysicing</dc:creator><category>kubernetes</category><category>kubernetes</category></item><item><title>知识点</title><link>https://ysicing.me/posts/faq/</link><pubDate>Mon, 18 May 2020 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Mon, 18 May 2020 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/faq/</guid><description>docker npm安装问题 npm config set unsafe-perm true git操作 # 改崩了 git fetch --all git reset --hard origin/master # 放弃本地全部/单个 git checkout . git checkout -- filename</description><dc:creator>ysicing</dc:creator><category>冷知识</category></item><item><title>awk 中关于多个$的用法</title><link>https://ysicing.me/posts/awk-func/</link><pubDate>Wed, 18 Dec 2019 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Wed, 18 Dec 2019 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/awk-func/</guid><description>上周有遇到过这个问题 awk '{print $$1}' 这个$$是什么用法呢 间接字段寻址,其类似 awk '{print $$1}' ===&amp;gt; awk '{print $($1)}' ===&amp;gt; awk '{Nr=$1; print $Nr}' 示例: $ echo -e &amp;quot;1 b c d\n2 b c d\n3 b c d\n4 b c d&amp;quot; 1 b c d 2 b</description><dc:creator>ysicing</dc:creator><category>shell</category><category>shell</category></item><item><title>Docker配置默认网桥ip地址</title><link>https://ysicing.me/posts/docker-default-address-pools/</link><pubDate>Fri, 13 Sep 2019 18:24:06 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 13 Sep 2019 18:24:06 +0800</atom:modified><guid>https://ysicing.me/posts/docker-default-address-pools/</guid><description>记录一下 修改docker默认桥接网络ip段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt;EOF { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://dyucrs4l.mirror.aliyuncs.com&amp;#34;], &amp;#34;bip&amp;#34;: &amp;#34;169.254.0.1/24&amp;#34;, &amp;#34;max-concurrent-downloads&amp;#34;: 10, &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;, &amp;#34;log-level&amp;#34;: &amp;#34;warn&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;max-size&amp;#34;: &amp;#34;20m&amp;#34;, &amp;#34;max-file&amp;#34;: &amp;#34;2&amp;#34; }, &amp;#34;default-address-pools&amp;#34;: [ { &amp;#34;base&amp;#34;: &amp;#34;100.250.0.0/16&amp;#34;, &amp;#34;size&amp;#34;: 24</description><dc:creator>ysicing</dc:creator><category>docker</category><category>cri</category><category>docker</category></item><item><title>一键安装go1.17</title><link>https://ysicing.me/posts/go-install/</link><pubDate>Sat, 18 May 2019 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sat, 18 May 2019 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/go-install/</guid><description>Linux环境一键脚本 1 curl https://sh.ysicing.me/install/go.sh | bash ChangeLog 20210911 更新脚本支持lima普通用户 go升级到1.17.1 Mac安装 如果已经安装了brew，就可以快速安装了 # 安</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/other/go1.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>go</category><category>go</category></item><item><title>阿里云轻量应用服务器升级内核</title><link>https://ysicing.me/posts/aliyun-debian-upgrade-kernel/</link><pubDate>Sat, 18 May 2019 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sat, 18 May 2019 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/aliyun-debian-upgrade-kernel/</guid><description>阿里云轻量应用服务器升级内核 升级有风险请慎重哦 配置说明 阿里云HK 1核1G1TB30Mbps ¥24/m Debian 9.9 更新源 需要移除默认源，使用如下源 # 需</description><dc:creator>ysicing</dc:creator><category>debian</category></item><item><title>AdGuard使用姿势</title><link>https://ysicing.me/posts/dns-adguard-install/</link><pubDate>Thu, 18 Apr 2019 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Thu, 18 Apr 2019 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/dns-adguard-install/</guid><description>AdGuard Home使用Golang开发，因此安装非常简单，这里以容器的方式部署为例，其它方式可参考官方帮助文档。 主要功能 拦截AD 号称隐私保护 家庭保护</description><dc:creator>ysicing</dc:creator><category>dns</category><category>tools</category></item><item><title>龙芯Mips64el平台上部署K8s</title><link>https://ysicing.me/posts/mips64el-loongson-k8s/</link><pubDate>Fri, 18 May 2018 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Fri, 18 May 2018 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/mips64el-loongson-k8s/</guid><description>不会具体讲怎么部署，原理都类似,将原先amd64换成mips64el 中标麒麟龙芯CPU源 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # /etc/yum.repos.d/ns7-mips.repo [ns7-mips64el-os] name=NeoKylin Linux</description><dc:creator>ysicing</dc:creator></item><item><title>Debian个人常用操作指南</title><link>https://ysicing.me/posts/debian-op/</link><pubDate>Thu, 18 May 2017 22:55:18 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Thu, 18 May 2017 22:55:18 +0800</atom:modified><guid>https://ysicing.me/posts/debian-op/</guid><description>一键最新脚本 1 2 export MIRRORS=&amp;#34;http://mirrors.aliyun.com&amp;#34; # 默认是清华源 curl -s https://sh.ysicing.me/debian/init.sh | bash Debian 11 赶紧升级Debian 11, 好处多多 升级debian10(buster)内核版本 1 2 3 4 5 6 7 8 9</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/debian/Debian_logo.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>debian</category><category>debian</category></item><item><title>README</title><link>https://ysicing.me/posts/blog-notice/</link><pubDate>Sun, 28 Jul 2013 13:21:00 +0800</pubDate><author>root@ysicing.net (ysicing)</author><atom:modified>Sun, 28 Jul 2013 13:21:00 +0800</atom:modified><guid>https://ysicing.me/posts/blog-notice/</guid><description>开始之前 在阅读本书之前希望您掌握以下知识和准备以下环境： Debian 常用命令 Docker 基本操作 Mac/Linux 皆可 系列主题 Kubernetes(1.18.19)实践 Go(1</description><dc:creator>ysicing</dc:creator><media:content url="https://ysicing.me/images/custom/code-file.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>站点</category><category>站点</category></item></channel></rss>